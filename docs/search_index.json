[
["index.html", "R Spatial Workshop Notes Fall Quarter 2019 Introduction Workshop Organization Prior Knowledge Topics Additional information", " R Spatial Workshop Notes Fall Quarter 2019 Angela Li Introduction This site contains workshop notes from the R Spatial Workshop at the Center for Spatial Data Science. Workshops are held on Tuesdays from noon-1pm during Fall Quarter 2019. Our goal for running these workshops are to teach researchers how to work effectively with spatial data in R. This workshop mirrors the Introduction to Spatial Data Science course taught by Luc Anselin and Marynia Kolak. You are welcome to join us in Searle 240A for workshops if you’re a member of the UChicago campus community! Bring a laptop to follow along. Workshop Organization Each chapter of this bookdown book represents a 1-hour workshop taught at the center. Chapters will be uploaded after the workshop so you can self study the material. A tentative workshop schedule can be found at this link. Scripts from the workshops will be uploaded to Github following each workshop and can be found at this link. Data used in the workshops will be linked to in each workshop chapter or can be found on the GeoDa Center data website. All data will eventually be found in an R package developed by the CSDS. Prior Knowledge We assume that workshop attendees have used RStudio and are familiar with the basics of R. If you need a refresher, this R for Social Scientists tutorial developed by Data Carpentry is a good place to start. Additionally, Luc Anselin’s introductory R lab notes can be found on the CSDS Tutorials page. Topics We plan to cover the following topics: Spatial data formats Projections Spatial data handling Spatial data operations Static maps Interactive maps Organization of research projects Reproducible research with R Additional information Workshops are run by Angela Li, R Spatial Advocate for the CSDS. If you have any questions about the following material, please reach out to her at ali6@uchicago.edu. This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. "],
["project-setup.html", "Project Setup Prerequisites for Git workflow Workflow with Git Workflow without Git Additional reading", " Project Setup The goal of this section is to help you: Set up a directory on your computer to store scripts and data for this workshop Back up all workshop materials online using Github Prerequisites for Git workflow You have a Github account. If not, create one here. You have Git on your computer. Check by typing git --version in the Terminal pane in RStudio. Macs should already have Git, Windows will need to install Git Bash on their computer. - You have configured Git. Check by typing git config --list in the Terminal pane in RStudio. If you have not configured git, follow these instructions. Workflow with Git Make sure you have the prerequisites for this workflow (see above section), otherwise you’ll be frustrated. Go to github.com and create a new repository. Choose to make it public or private (your choice). Initialize with a README. Open RStudio. Click “New Project”. Click “Version Control”. Paste the URL of the repository you just created. Create the following folders in your project by clicking on “New Folder” in the Files pane in RStudio: data doc R Put data in data, written output in doc, and R code scripts in R. Once you’ve put data and scripts in, you can back up your documents by going to the tab in RStudio called “Git”. Check the checkbox next to the items you’d like to back up. Click “Commit”. Type an informative message, i.e. “Added materials from first workshop”. Click “Push”. You have now uploaded your files to Github. If you go to the web link of the repository you created on Github, your materials should now be there. Workflow without Git Open RStudio. Click “New Project”. Click “New Directory”. Create the following folders in your project by clicking on “New Folder” in the Files pane in RStudio: data doc R Put data in data, written output in doc, and R code scripts in R. Additional reading Happy Git with R: the comprehensive guide on how to use Git/Github with R Project Management with RStudio: great resource for organizing your research files and scripts "],
["introduction-to-spatial-data.html", "Chapter 1 Introduction to Spatial Data 1.1 Learning Objectives 1.2 Spatial Data Basics 1.3 Interactive Tutorial 1.4 Links", " Chapter 1 Introduction to Spatial Data 1.1 Learning Objectives Understand the difference between vector and raster data Describe the components of a PROJ4 string Name the two main packages for spatial vector data in R Import, project, and plot spatial data in R 1.2 Spatial Data Basics We first reviewed some important information about spatial data. The two main types are vector (points, lines, polygons) and raster (pixels, surfaces). Since this workshop is given in the context of social science research, the rest of our workshop focuses on vector data such as administrative boundaries, locations of business, or road networks. Next, we went over what a coordinate reference system was, as well as the components of a PROJ4 string, or how coordinate reference systems are stored electronically. Rather than writing out the whole PROJ4 string, we can use an EPSG code as shorthand for it. This Software Carpentry workshop provides excellent explanations and exercises for understanding coordinate reference systems. Finally, we learned that sf is the modern package for handling spatial data in R. Some old packages still use sp. However, it has a much more complicated representation of spatial data, so we will focus on sf. See this guide for a translation of sp to sf commands, if you’re used to using sp. 1.3 Interactive Tutorial The rest of the workshop was dedicated to a hands-on exercise where we live coded together. The data we used was 1986 Chicago aldermanic ward boundary data, which can be found on the UChicago Map Collection page here. This workshop’s script can be found here. 1.3.1 Functions learned st_read() st_crs() st_transform() 1.3.2 Import spatial data The first thing we’ll do is import the spatial data. Our spatial data happens to be stored as a shapefile (.shp, but actually 4 files). These are getting less fashionable (see GeoJSON, etc.), but a lot of spatial data is still stored this way. First load the sf library. If you don’t have it, install it in your console or in the Packages RStudio pane. # install.packages(&quot;sf&quot;) library(sf) ## Warning: package &#39;sf&#39; was built under R version 3.4.4 ## Linking to GEOS 3.6.1, GDAL 2.1.3, PROJ 4.9.3 We’ll use the st_read function. This also reads GeoJSON, PostGIS databases, and more. ward86 &lt;- st_read(&quot;data/ward1986.shp&quot;) ## Reading layer `ward1986&#39; from data source `/Users/angela/Desktop/Spatial Data Science/workshop-notes/data/ward1986.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 51 features and 1 field (with 1 geometry empty) ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -87.9402 ymin: 41.6443 xmax: -87.524 ymax: 42.0231 ## epsg (SRID): 4269 ## proj4string: +proj=longlat +datum=NAD83 +no_defs You can use the keyboard shortcut Ctrl-Enter to run a line of code in R. Press tab after typing in st_read(&quot;&quot;) with your cursor in between the quotation marks and you’ll get a nice autocomplete feature. Check what projection the data is in: st_crs(ward86) ## Coordinate Reference System: ## EPSG: 4269 ## proj4string: &quot;+proj=longlat +datum=NAD83 +no_defs&quot; Sike, this isn’t projected! You can tell because the proj4string starts with +proj=longlat. You can still plot this, but things will start to get iffy if you try to do distance or area calculations, or plot these ward boundaries with other layers. I can still plot the map, but as a good geographic data analyst, I’ll need to project it. plot(ward86) 1.3.3 Project your data We need to project the data: but how do we choose what projection we need? This is a deep philosophical question, but thankfully the UChicago library has already told us the best projections to use for our data: Illinois East State Plane or UTM Zone 16. I generally do a online search to look up the EPSG codes for the projection I want to use, or use spatialreference.org, which has a database for all EPSG codes for projections. After I do some sleuthing, I find that the EPSG code I want for UTM Zone 16 is 32616. I then use st_transform() to project the data, and save it as a new sf dataframe. ward86_utm &lt;- st_transform(ward86, 32616) I check the CRS - yep, looks right! st_crs(ward86_utm) ## Coordinate Reference System: ## EPSG: 32616 ## proj4string: &quot;+proj=utm +zone=16 +datum=WGS84 +units=m +no_defs&quot; Challenge Question: what datum is this in? What are the units for this projection? Plot it: plot(ward86_utm) Challenge Project the 1986 ward data into the Illinois East State plane projection. Follow the above steps to do so. Hint: look up the EPSG code online! ward86_stateplane &lt;- st_transform(ward86, 3435) st_crs(ward86_stateplane) ## Coordinate Reference System: ## EPSG: 3435 ## proj4string: &quot;+proj=tmerc +lat_0=36.66666666666666 +lon_0=-88.33333333333333 +k=0.9999749999999999 +x_0=300000.0000000001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs&quot; plot(ward86_stateplane) Note that the +units=us-ft part of the proj4string means that any distance calculations you do on the ward86_stateplane data will be done in feet. Keep in mind that there are “bad” projections for your data. For example, if I accidentally chose the Alaska Albers projection for my data… ward86_alaska &lt;- st_transform(ward86, 3338) plot(ward86_alaska) Clearly this projection isn’t great for Chicago! But something to keep in mind, if, say, you’re making maps of places closer to the poles. ``` 1.4 Links All the links in this workshop: Software Carpentry Vector Data tutorial: https://datacarpentry.org/organization-geospatial/02-intro-vector-data/index.html Software Carpentry CRS tutorial: https://datacarpentry.org/organization-geospatial/03-crs/index.html sf reference site: https://r-spatial.github.io/sf/index.html Migrating from sp to sf guide: https://github.com/r-spatial/sf/wiki/Migrating GeoJSON explanation: http://geojson.org/ Chicago ward data: https://www.lib.uchicago.edu/e/collections/maps/chigis.html Link to good EPSG lookup website: http://spatialreference.org/ "],
["single-dataset-gis-operations.html", "Chapter 2 Single-Dataset GIS Operations 2.1 Learning Objectives 2.2 Functions Learned 2.3 Interactive Tutorial 2.4 Exercises 2.5 Links", " Chapter 2 Single-Dataset GIS Operations 2.1 Learning Objectives Become familiar with several common single-dataset GIS operations Calculate centroids of polygons Create buffers Explore additional single-dataset GIS operations 2.2 Functions Learned st_geometry() st_centroid() st_buffer() st_coordinates() st_bbox() 2.3 Interactive Tutorial This workshop’s script can be found here. 2.4 Exercises Project 1986 ward data into correct UTM projection library(sf) ward86 &lt;- st_read(&quot;data/ward1986.shp&quot;) ## Reading layer `ward1986&#39; from data source `/Users/angela/Desktop/Spatial Data Science/workshop-notes/data/ward1986.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 51 features and 1 field (with 1 geometry empty) ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -87.9402 ymin: 41.6443 xmax: -87.524 ymax: 42.0231 ## epsg (SRID): 4269 ## proj4string: +proj=longlat +datum=NAD83 +no_defs ward86 &lt;- st_transform(ward86, 32616) plot(ward86) Calculate centroids of wards with st_centroid ?st_centroid centroids &lt;- st_centroid(ward86) ## Warning in st_centroid.sf(ward86): st_centroid assumes attributes are ## constant over geometries of x plot(st_geometry(centroids), cex = 0.1) plot(st_geometry(ward86), add = T) plot(st_geometry(ward86)) plot(st_geometry(centroids), cex = 0.1, add = T) Calculate bounding box with st_bbox Plot centroids, buffered centroids, and wards for each year 2.5 Links Geometric unary operations (aka, single dataset operations): https://r-spatial.github.io/sf/reference/geos_unary.html sf cheatsheet: https://github.com/rstudio/cheatsheets/blob/master/sf.pdf PostGIS cheatsheet (off of which sf is based): http://www.postgis.us/downloads/postgis21_cheatsheet.pdf "],
["multiple-dataset-gis-operations-visualization.html", "Chapter 3 Multiple-Dataset GIS Operations / Visualization 3.1 Learning Objectives 3.2 Functions Learned 3.3 Interactive Tutorial 3.4 Links", " Chapter 3 Multiple-Dataset GIS Operations / Visualization 3.1 Learning Objectives Create multi-layered maps Calculate the area of polygons Find spatial intersections 3.2 Functions Learned ggplot() geom_sf() st_intersects() filter(): picks cases based on their values, from the dplyr package. Hint: For each new function we go over, type ? in front of it in the console to pull up the help page. 3.3 Interactive Tutorial This workshop’s script can be found here. Challenge Do you remember how to read in and project data? Try it out! Also calculate the centroids. library(sf) ward98 &lt;- st_read(&quot;data/ward1998.shp&quot;) ## Reading layer `ward1998&#39; from data source `/Users/angela/Desktop/Spatial Data Science/workshop-notes/data/ward1998.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 50 features and 2 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -87.94021 ymin: 41.64434 xmax: -87.52404 ymax: 42.02313 ## epsg (SRID): 4269 ## proj4string: +proj=longlat +datum=NAD83 +no_defs ward98 &lt;- st_transform(ward98, 32616) centroids &lt;- st_centroid(ward98) ## Warning in st_centroid.sf(ward98): st_centroid assumes attributes are ## constant over geometries of x We are going to start plotting with a new package: ggplot2. This is my favorite package for plotting sf objects, as there is a special function in the package called geom_sf that expressly handles spatial data. The syntax of a ggplot call is as follows: To plot an sf object, use geom_sf(). library(ggplot2) ggplot(data = ward98) + geom_sf() Challenge Use geom_sf to make a ggplot of the centroids data. ggplot(data = centroids) + geom_sf() Note: If you keep getting the following error message, try reversing the geom_sfs again and/or highlighting/re-running the lines of code multiple times. Error in grid.Call(C_textBounds, as.graphicsAnnot(x\\(label), x\\)x, x$y, : polygon edge not found One nice thing about ggplot is that it’s super easy to layer things. For example, if I want to plot the wards and the centroids, I can do that by moving the data = argument to within the geom_sf() call. ggplot() + geom_sf(data = ward98) + geom_sf(data = centroids) I can also change colors and other settings. ggplot() + geom_sf(data = ward98, fill = &quot;lightblue&quot;) + geom_sf(data = centroids, color = &quot;blue&quot;) So far, we’ve plotted data that was from the same original dataset. What if we want to add a layer with Chicago’s waterways? First we download, import, and project data from the Chicago Data Portal. As an exercise, I’m going to download a Chicago waterways data GeoJSON, which st_read can also interpret and convert into an sf object. Challenge Read and project the waterways JSON. Hint: save your JSON file in the data/ folder in your workspace. water &lt;- st_read(&quot;data/Waterways.geojson&quot;) ## Reading layer `OGRGeoJSON&#39; from data source `/Users/angela/Desktop/Spatial Data Science/workshop-notes/data/Waterways.geojson&#39; using driver `GeoJSON&#39; ## Simple feature collection with 605 features and 6 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -87.9389 ymin: 41.6195 xmax: -86.20666 ymax: 43.21631 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +datum=WGS84 +no_defs water &lt;- st_transform(water, 32616) Now, plot it to see if things are looking alright. ggplot() + geom_sf(data = water) Uh oh, looks like we have Lake Michigan with everything else. We want to filter out that feature. We’ll use the filter() command from dplyr. library(dplyr) water_clean &lt;- filter(water, name != &quot;LAKE MICHIGAN&quot;) Now we can make a map with both the wards and the waterways in Chicago. ggplot() + geom_sf(data = ward98) + geom_sf(data = water_clean, color = &quot;blue&quot;) Note that order matters here! ggplot plots in the order that you give your functions to it, so if you reorder the geom_sf calls, the wards are mapped after - and on top of! - the rivers. # Incorrect order of geom_sf() calls ggplot() + geom_sf(data = water_clean, color = &quot;blue&quot;) + geom_sf(data = ward98) The last thing we’ll do is figure out which wards intersect with waterways, using a powerful sf function called st_intersects. The output of st_intersects is a bit strange: it’s a list of indexes of the intersected features for each ward. The main thing you need to know is: if there is nothing in the list for a feature, that means nothing intersects with it. intersects &lt;- st_intersects(ward98, water_clean) str(intersects) ## List of 50 ## $ : int [1:146] 21 28 38 39 46 47 59 67 68 71 ... ## $ : int [1:28] 2 3 4 5 6 7 8 9 10 11 ... ## $ : int [1:24] 1 2 15 16 17 18 19 20 22 23 ... ## $ : int(0) ## $ : int(0) ## $ : int [1:3] 186 187 189 ## $ : int [1:3] 45 62 63 ## $ : int [1:3] 192 194 195 ## $ : int(0) ## $ : int [1:6] 381 389 390 569 579 586 ## $ : int [1:6] 64 65 66 143 155 156 ## $ : int 224 ## $ : int [1:14] 37 40 43 44 49 50 51 53 54 55 ... ## $ : int(0) ## $ : int 382 ## $ : int [1:34] 2 3 15 16 17 18 19 20 303 569 ... ## $ : int [1:13] 30 314 315 316 328 329 458 463 464 466 ... ## $ : int [1:23] 154 228 297 310 311 321 323 325 327 330 ... ## $ : int [1:6] 370 581 582 583 584 585 ## $ : int [1:3] 380 384 386 ## $ : int 58 ## $ : int(0) ## $ : int(0) ## $ : int [1:21] 291 292 293 294 295 296 307 308 309 311 ... ## $ : int [1:18] 383 400 401 402 411 413 420 422 428 429 ... ## $ : int [1:3] 509 510 511 ## $ : int(0) ## $ : int [1:16] 264 446 447 452 454 455 460 462 465 478 ... ## $ : int(0) ## $ : int 449 ## $ : int [1:34] 168 191 250 255 256 257 267 268 274 275 ... ## $ : int(0) ## $ : int [1:15] 227 247 250 253 258 265 275 280 284 290 ... ## $ : int [1:67] 29 60 61 79 152 153 162 178 193 213 ... ## $ : int [1:59] 70 99 154 228 297 310 331 332 333 334 ... ## $ : int [1:17] 48 241 248 298 299 300 301 302 305 306 ... ## $ : int 469 ## $ : int [1:15] 153 200 251 252 254 260 262 263 266 270 ... ## $ : int [1:2] 425 438 ## $ : int [1:8] 432 433 439 440 453 456 458 459 ## $ : int(0) ## $ : int(0) ## $ : int [1:32] 144 145 146 147 148 149 150 151 157 158 ... ## $ : int [1:4] 205 221 227 526 ## $ : int(0) ## $ : int(0) ## $ : int [1:32] 69 73 87 105 119 121 126 133 135 138 ... ## $ : int [1:7] 80 84 89 229 230 232 236 ## $ : int(0) ## $ : int [1:2] 190 223 ## - attr(*, &quot;predicate&quot;)= chr &quot;intersects&quot; ## - attr(*, &quot;region.id&quot;)= chr [1:50] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... ## - attr(*, &quot;ncol&quot;)= int 604 ## - attr(*, &quot;class&quot;)= chr &quot;sgbp&quot; Note: This is where projection is extremely important. If you get an error message that says: Error: st_crs(x) == st_crs(y) is not TRUE that probably means that you forgot to project one of your datasets. Check the CRS with both and fix it with st_transform. This is a little hairy, so in order to use this reasonably, we combine it with the filter command we learned earlier. We are filtering the original data by whether or not it has any water features that intersect with it. water_wards &lt;- filter(ward98, lengths(intersects) &gt; 0) Note: Don’t forget the s in lengths like I did during the workshop! Challenge Can you plot the wards, the rivers, and the wards that intersect with a river? The grand finale! ggplot() + geom_sf(data = ward98) + geom_sf(data = water_wards, fill = &quot;lightblue&quot;) + geom_sf(data = water_clean, color = &quot;blue&quot;) Remember to push your work to Github to back it up! 3.4 Links Link to current Chicago waterways data: https://data.cityofchicago.org/Parks-Recreation/Waterways/eg9f-z3t6 geom_sf documentation page: https://ggplot2.tidyverse.org/reference/ggsf.html ggsave documentation page: https://ggplot2.tidyverse.org/reference/ggsave.html dplyr package documentation site: https://dplyr.tidyverse.org Excellent blog post on how to manipulate spatial information: http://strimas.com/r/tidy-sf/ "],
["multiple-dataset-gis-operations-visualization-pt-2.html", "Chapter 4 Multiple-Dataset GIS Operations / Visualization pt. 2 4.1 Learning Objectives 4.2 Functions Learned 4.3 Interactive Tutorial 4.4 Challenges 4.5 Links", " Chapter 4 Multiple-Dataset GIS Operations / Visualization pt. 2 4.1 Learning Objectives Combine two datasets with spatial join Perform spatial aggregation (point in polygon) Manipulate data with dplyr Save a ggplot image 4.2 Functions Learned st_join() select() count() arrange() st_geometry() ggsave() Hint: For each new function we go over, type ? in front of it in the console to pull up the help page. 4.3 Interactive Tutorial This workshop’s script can be found here. 4.4 Challenges We’ve been reading shapefiles that we’ve downloaded, but we call also read data directly from a website using an “API”. These are often great ways to get data without having to manually download it. We’re going to read data from the Chicago Data Portal: Libraries points Community Area polygons Click on the “API” button to directly access the data, rather than having to download a csv via “Export”. Challenge Which one of these is a geographic data format? Challenge Fill in the following script: # Load libraries for use areas &lt;- st_read(&quot;https://data.cityofchicago.org/resource/igwz-8jzy.geojson&quot;) ## Reading layer `OGRGeoJSON&#39; from data source `https://data.cityofchicago.org/resource/igwz-8jzy.geojson&#39; using driver `GeoJSON&#39; ## Simple feature collection with 77 features and 9 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -87.94011 ymin: 41.64454 xmax: -87.52414 ymax: 42.02304 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +datum=WGS84 +no_defs # Read in libraries and areas data # Project both # Make a ggplot with libraries and community areas Challenge Which community areas have no libraries? Use st_intersects and filter to make a map. # Load library with filter() in it # Find which areas intersect with libraries and save as a variable called &quot;intersects&quot; # Filter areas by *without* libraries. Save as a variable called &quot;no_lib&quot; Hint: use &quot;==&quot; instead of &quot;&gt;&quot; in the logical comparison # Make a ggplot with libraries, community areas, and community areas without libraries The order in which you give arguments to st_intersects matters! I always have to look it up, but for point-in-polygon, you want the polygon first, then the points. One question you may be asking yourself is, how many libraries are in each area? We can tackle this with an operation known as a spatial join. What we do is join information about the polygons to the points, so we have for each point which community area it’s in. More formally, we are adding the attributes of a layer to the other one. A spatial join is not the same as an attribute join, which is based on common column (attribute) values between two datasets. Spatial joins are based on a spatial relationship: is this point inside this polygon? You can try doing an attribute join on community area number/name with this Public Health dataset, and the command left_join() from dplyr. The syntax is generally as follows, for point-in-polygon: st_join(point_sf, poly_sf) 4.4.1 A simple example We can spatial join just one attribute, or a few. We can use select() to choose attributes. One we’ve done our spatial join, we can manipulate the data with count() and arrange() to figure out which community areas have the most libraries. This is also known as spatial aggregation. If work with the spatial data gets too clumsy or slow, we can drop the geometry column with st_geometry()&lt;-. 4.4.2 Saving your plots We ran out of time for this last time, but to save a ggplot image, you can use ggsave() after a ggplot2 command. You can adjust the width and height of the image in arguments to the function. Challenge Save one of the plots we’ve made in this workshop to figs/name-of-plot.png. 4.5 Links All the links in this workshop: Link to Chicago Libraries data: https://data.cityofchicago.org/Education/Libraries-Locations-Hours-and-Contact-Information/x8fc-8rcq Link to Chicago Community Areas data: https://data.cityofchicago.org/Facilities-Geographic-Boundaries/Boundaries-Community-Areas-current-/cauq-8yn6 "],
["r-markdown-and-custom-maps.html", "Chapter 5 R Markdown and Custom Maps 5.1 Learning Objectives 5.2 Topics Learned 5.3 Interactive Tutorial 5.4 Challenges 5.5 Links", " Chapter 5 R Markdown and Custom Maps 5.1 Learning Objectives Create a R Markdown document Embed code and text in an R Markdown document Manipulate R Markdown chunk options Become familiar with the tmap package 5.2 Topics Learned .rmd structure Code chunks in R Markdown Note: If you do not have LaTeX installed on your computer, please install tinytex using the following commands so that you will be able to Knit to a PDF and Beamer during this workshop. install.packages(‘tinytex’) tinytex::install_tinytex() Hint: Use the R Markdown guides in RStudio under Help &gt; Cheatsheets &gt; R Markdown Cheatsheet (or R Markdown Reference Guide) for help. 5.3 Interactive Tutorial This workshop’s R Markdown can be found here. 5.4 Challenges We’re going to continue using the data we used last week from the Chicago Data Portal, but we’ll be working in a R Markdown document instead of a R script. Challenge Create a new R Markdown document. Knit the document. Change the YAML header at the top to include your personal information. Try changing some of the options in the header (aka the options between the “—”): output: pdf_document fontsize: 14pt You can use this reference guide to help you out. Challenge Use Markdown formatting to write some information about the Chicago libraries and community areas datasets. Use: sections bold/italic text two types of lists Challenge Insert an ggplot2 image that we created last time in the document. Here’s the data from last week: Libraries points Community Area polygons Remember: you can click on the “API” button to directly access the data, rather than having to download a csv via “Export”. Challenge Add code chunks that: load packages read data create a ggplot2 plot Challenge Add chunk options that: load packages (hide this code) read data (show this code, and run it) create a ggplot2 plot (don’t show this code, but run it, and control the size of the figure) Try naming your chunks something useful. Challenge Try making a map with tmap (similar syntax as ggplot2), using the tmap vignette. Luc Anselin has written a more in-depth tutorial for tmap, which you can find and go through here, under Introduction to Spatial Data Science &gt; Basic Mapping. 5.5 Links All the links in this workshop: Link to Chicago Libraries data: https://data.cityofchicago.org/Parks-Recreation/Waterways/eg9f-z3t6 Link to Chicago Community Areas data: https://data.cityofchicago.org/Facilities-Geographic-Boundaries/Boundaries-Community-Areas-current-/cauq-8yn6 Link to R Markdown site: https://rmarkdown.rstudio.com Link to Software Carpentry R Markdown tutorial: https://swcarpentry.github.io/r-novice-gapminder/15-knitr-markdown/ Getting started with tmap vignette: https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html Geocomputation with R - good chapter on making maps with tmap: https://geocompr.robinlovelace.net/adv-map.html "],
["custom-and-animated-maps.html", "Chapter 6 Custom and Animated Maps 6.1 Learning Objectives 6.2 Functions Learned 6.3 Interactive Tutorial 6.4 Challenges 6.5 Links", " Chapter 6 Custom and Animated Maps 6.1 Learning Objectives Use urban_agglomerations and world data from the spData package Make the same map in ggplot2 and tmap Make an animated map and save it 6.2 Functions Learned tm_shape tm_polygons tm_dots tm_facets tmap_animation 6.3 Interactive Tutorial This workshop’s R Markdown can be found here. 6.4 Challenges This workshop uses an example from Geocomputation with R, developed by Robin Lovelace. The original script can be found online. If you get the following error, make sure the magick package is installed with install.packages(“magick”), and that ImageMagick itself is installed: Error in tmap::tmap_animation(tm, filename = “doc/city-pop.gif”) : Could not find ImageMagick. Make sure it is installed and included in the systems PATH Challenge Look at the urban_agglomerations and the world data. What type of spatial data is each (point, line, polygon)? How many observations are in each dataset? What projection is each in? Make a ggplot2 map of both datasets Challenge Make a tmap map of urban_agglomerations. Challenge Change the color of the points to one of your choosing. Luc Anselin has written a more in-depth tutorial for tmap, which you can find and go through here, under Introduction to Spatial Data Science &gt; Basic Mapping. 6.5 Links The links in this workshop: Geocomputation with R - Chapter 8 talks about making maps with tmap: https://geocompr.robinlovelace.net/adv-map.html Getting started with tmap vignette: https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html "],
["interactive-maps.html", "Chapter 7 Interactive Maps 7.1 Learning Objectives 7.2 Functions Learned 7.3 Overview 7.4 Interactive Tutorial 7.5 R Training Workshop 7.6 Next week(s?)", " Chapter 7 Interactive Maps 7.1 Learning Objectives Explore the various options in R for interactive mapping in 3 packages: tmap, mapview, and leaflet 7.2 Functions Learned tmap_mode mapview leaflet addProviderTiles addCircles 7.3 Overview This workshop teaches section Chapter 8.4: Interactive Maps of Geocomputation with R. It also digs into the vignettes for mapview, which can be found at the mapview documentation website. 7.4 Interactive Tutorial This workshop’s R Markdown can be found here. 7.5 R Training Workshop I will be teaching a day-long “R for Social Scientists” Data Carpentry workshop on April 12 at the Center for Spatial Data Science. Topics to be covered include: Introduction to R Working with data types, strings, and dates in R Manipulating data frames in R Data visualization in R …and lunch will be provided! Please register at this link if you are interested! 7.6 Next week(s?) What topics do you want me to cover? Fill out this Google Form and I’ll see what I can do! "],
["interactive-maps-with-shiny.html", "Chapter 8 Interactive Maps with Shiny 8.1 Learning Objectives 8.2 Topics Learned 8.3 Overview 8.4 Interactive Tutorial 8.5 R Training Workshop 8.6 Links", " Chapter 8 Interactive Maps with Shiny 8.1 Learning Objectives Create a basic Shiny app using leaflet 8.2 Topics Learned Shiny (UI vs. server) Interactivity Find the Shiny cheatsheet in RStudio under Help &gt; Cheatsheets &gt; Web Applications with shiny 8.3 Overview This workshop teaches how to create a basic Shiny web app using leaflet. 8.4 Interactive Tutorial This workshop’s Shiny app code can be found here. Challenge Create a new Shiny app from a template in R. Run the app. Which parts of the Shiny UI code map to the app? How are ui and server linked (what are the features that are the same across both?) Change the title of the app. Challenge In the UI object, add a leafletOutput(&quot;map&quot;) call in the mainPanel() function. Then, in the server object, add a output$map &lt;- renderLeaflet({}) call. That is, fill in the following script: ui &lt;- fluidPage( # Application title titlePanel(&quot;World Population Over Time&quot;), # Sidebar with a slider input for number of bins sidebarLayout( sidebarPanel( # sliderInput(&quot;bins&quot;, # &quot;Number of bins:&quot;, # min = 1, # max = 50, # value = 30), ), # Specifies what to put in the main panel mainPanel( # Put one line of code here ) ) ) server &lt;- function(input, output) { # output$distPlot &lt;- renderPlot({ # # generate bins based on input$bins from ui.R # x &lt;- faithful[, 2] # bins &lt;- seq(min(x), max(x), length.out = input$bins + 1) # # # draw the histogram with the specified number of bins # hist(x, breaks = bins, col = &#39;darkgray&#39;, border = &#39;white&#39;) # }) output$map &lt;- renderLeaflet({ # Put three lines of leaflet code here }) } Challenge In the UI object, add a sliderInput of &quot;year&quot;. Change the step size to 5, and remove the comma for thousands (hint: do ?sliderInput to look at the documentation, and options). Challenge Create a new variable called pop_per_year that is a subset of city by year, depending on which year you enter (input$year). Use the filter() command in the dplyr package. Challenge Try resizing the marker size depending on population, adding a popup, or doing more to customize your map! Try adding a feature in your app so that you only show cities over a certain population in millions (specified by the user), using numericInput() instead of sliderInput(). Challenge Add a data table element with renderDataTable() and dataTableOutput() so you can see the attributes of the points in the map. You can share your Shiny apps publicly by creating an account at https://shinyapps.io and clicking Publish in the top of your app script. 8.5 R Training Workshop I will be teaching a day-long “R for Social Scientists” Data Carpentry workshop on April 12 at the Center for Spatial Data Science. Topics to be covered include: Introduction to R Working with data types, strings, and dates in R Manipulating data frames in R Data visualization in R …and lunch will be provided! Please register at this link if you are interested! 8.6 Links Leaflet documentation website: https://rstudio.github.io/leaflet/ Intro to Shiny webinar (45 minutes): https://www.rstudio.com/resources/webinars/introduction-to-shiny/ Free Shiny online course from Datacamp: https://www.datacamp.com/courses/building-web-applications-in-r-with-shiny Shiny examples: Generate random points on a map: https://bhaskarvk.github.io/user2017.geodataviz/presentations/07-Interactive_Maps.html#36 Zip code explorer: http://shiny.rstudio.com/gallery/superzip-example.html Twin cities bus dashboard: https://gallery.shinyapps.io/086-bus-dashboard/ "],
["introduction-to-raster-data.html", "Chapter 9 Introduction to Raster Data 9.1 Overview 9.2 Links", " Chapter 9 Introduction to Raster Data 9.1 Overview This workshop introduces raster data and how to work with it in R. We will be working through the first part of the Geospatial Data workshop put together by Data Carpentry. Please download data for this workshop at this link. 9.2 Links Introduction to Raster Data, Data Carpentry (what is it?): https://datacarpentry.org/organization-geospatial/01-intro-raster-data/index.html Working with Raster Data in R, Data Carpentry: https://datacarpentry.org/r-raster-vector-geospatial/01-raster-structure/index.html Data for this workshop: http://datacarpentry.org/geospatial-workshop/data/ Great resource for more tutorials regarding spatial data: https://www.earthdatascience.org "],
["introduction-to-interpolation.html", "Chapter 10 Introduction to Interpolation 10.1 Overview 10.2 Make sure relevant packages are installed 10.3 Links", " Chapter 10 Introduction to Interpolation 10.1 Overview This workshop introduces interpolation in R using an example built into the sp package, measuring lead levels at various points. The built-in dataset is called meuse. 10.2 Make sure relevant packages are installed In order to complete this workshop, you will need the following packages: sp gstat We also recommend the following: ggplot2 tmap sf 10.3 Links gstat meuse vignette: https://cran.r-project.org/web/packages/gstat/vignettes/gstat.pdf Explanation of working with the meuse dataset: https://rpubs.com/nabilabd/118172 "],
["interpolation-with-array-of-things-data.html", "Chapter 11 Interpolation with Array of Things Data 11.1 Overview 11.2 Download data 11.3 Links", " Chapter 11 Interpolation with Array of Things Data 11.1 Overview This workshop continues teaching interpolation in R using Array of Things data. This is based on Part 2 of the Array of Things workshop put together by Marynia Kolak at the CSDS. 11.2 Download data Please download data for this workshop by going to the following link and right-clicking on “Raw”, then saving the link as a CSV on your computer. Or, you can run the following code in your console: download.file(&quot;https://github.com/spatialanalysis/workshop-notes/raw/master/data/node_temps.csv&quot;, destfile = &quot;node-temps.csv&quot;) Also download a copy of the Chicago Community Area data here, or use the API Endpoint (copy and paste into your console). library(sf) areas &lt;- st_read(&quot;https://data.cityofchicago.org/resource/igwz-8jzy.geojson&quot;) ## Reading layer `OGRGeoJSON&#39; from data source `https://data.cityofchicago.org/resource/igwz-8jzy.geojson&#39; using driver `GeoJSON&#39; ## Simple feature collection with 77 features and 9 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -87.94011 ymin: 41.64454 xmax: -87.52414 ymax: 42.02304 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +datum=WGS84 +no_defs Challenge Read in the csv as an sf object, then explore it using exploratory data functions like head(), str(), summary(), and plot() Challenge Try making a map of the nodes, with the community areas, using ggplot2. Challenge Convert the sf object into an sp object. Hint: as_Spatial(sf) should do the trick. Challenge Make an empirical variogram of the data. Challenge Krige! Try out a few types of models: spherical, exponential, and linear. 11.3 Links When you can’t find great R documentation of concepts, ArcGIS documentation will do: Semivariogram and covariance functions Alternate explanation of how to interpolate with kriging (also uses proprietary GIS software): Kriging interpolation Variogram tutorial that provides some good, clear explanation of complicated concepts "],
["spatial-data-handling.html", "Chapter 12 Spatial Data Handling 12.1 Learning Objectives 12.2 Functions Learned 12.3 Interactive Tutorial 12.4 Reading data from an open data portal 12.5 Selecting data to work with 12.6 Spatial data time - my favorite part! 12.7 On your own 12.8 Very important concepts: projection, and spatial join", " Chapter 12 Spatial Data Handling 12.1 Learning Objectives Read data from an open data portal Manipulate non-spatial data in R Convert data from lat/lon into a simple features object Project spatial data Join data based on spatial attributes Create a basic choropleth map 12.2 Functions Learned loading packages: library() reading from an API: read.socrata() data exploration: head(), dim(), class(), names(), is.na(), plot() selecting data: filter(), select() creating a spatial object: st_as_sf(), st_crs(), read_sf(), st_geometry() projecting data: st_transform() Hint: For each new function we go over, type ? in front of it in the console to pull up the help page. 12.3 Interactive Tutorial The notebook with a more detailed version of this workshop can be found here. We will not cover everything in Luc’s detailed tutorial, but we will go over basic commands and common gotchas, in order to help you feel comfortable working through the tutorial. Please make sure you have the following packages installed: tidyverse RSocrata sf tmap lubridate You can install all of these at once with the following command: install.packages(c(&quot;tidyverse&quot;, &quot;RSocrata&quot;, &quot;sf&quot;, &quot;tmap&quot;, &quot;lubridate&quot;)) We start by loading the packages we need for this workshop. Here, I’ve loaded the “tidyverse” package with the library() function. library(tidyverse) Challenge Can you load the RSocrata, sf, tmap, and lubridate packages with the same function? 12.4 Reading data from an open data portal We then read data about 311 calls from a URL, otherwise known as an API. This is a straightforward way to quickly get data from an open data portal, without having to download and manage the data file locally. Here’s the data documentation site, from the City of Chicago. This will take a while to run, as we’re pulling over 250,000 observations vehicle_data &lt;- read.socrata(&quot;https://data.cityofchicago.org/resource/suj7-cg3j.csv&quot;) Challenge Try calling the head(), dim(), and class() functions on the new vehicle_data R object. What does the data look like? How many observations and variables are there? 12.5 Selecting data to work with In general, I may only be interested in a subset of the data. I’ll use the filter command to pull out only 311 calls from 2005. That year() function is pulling out the year from the date column (spreadsheet software often has this functionality as well). The %&gt;% is known as the “pipe”, and means “take vehicle_data, and pass it as the first argument to the next function. It comes in handy when I want to perform multiple operations in the”tidyverse&quot;. vehicle_data %&gt;% filter(year(creation_date) == 2005) ## creation_date status completion_date service_request_number ## 1 2005-02-10 Completed 2017-01-11 05-00213608 ## 2 2005-03-30 Completed - Dup 2017-01-11 05-00464206 ## 3 2005-06-16 Completed - Dup 2017-01-11 05-00932280 ## 4 2005-06-16 Completed 2017-01-11 05-00932409 ## 5 2005-06-16 Completed 2017-01-11 05-00933568 ## 6 2005-06-17 Completed - Dup 2017-01-11 05-00941492 ## 7 2005-08-01 Completed - Dup 2017-01-11 05-01221973 ## 8 2005-08-26 Completed - Dup 2017-01-11 05-01396640 ## type_of_service_request license_plate vehicle_make_model ## 1 Abandoned Vehicle Complaint 32L5657 Chrysler ## 2 Abandoned Vehicle Complaint ## 3 Abandoned Vehicle Complaint T159050 Honda ## 4 Abandoned Vehicle Complaint ## 5 Abandoned Vehicle Complaint ## 6 Abandoned Vehicle Complaint Toyota ## 7 Abandoned Vehicle Complaint 5823771 Oldsmobile/Cutlass/Ciera ## 8 Abandoned Vehicle Complaint ## vehicle_color current_activity most_recent_action ## 1 Black FVI - Outcome Create Work Order ## 2 ## 3 Black FVI - Outcome Create Work Order ## 4 FVI - Outcome Create Work Order ## 5 FVI - Outcome Create Work Order ## 6 Blue FVI - Outcome Create Work Order ## 7 Blue ## 8 ## how_many_days_has_the_vehicle_been_reported_as_parked_ ## 1 NA ## 2 NA ## 3 NA ## 4 NA ## 5 NA ## 6 NA ## 7 NA ## 8 NA ## street_address zip_code x_coordinate y_coordinate ward ## 1 1030 S MENARD AVE 60644 NA NA 29 ## 2 917 W EASTWOOD AVE 60640 1169205 1931086 46 ## 3 8905 S BRANDON AVE 60617 1198886 1846522 10 ## 4 9127 S ELLIS AVE 60619 NA NA 8 ## 5 1855 S CLINTON ST 60616 NA NA 25 ## 6 4829 W WOLFRAM ST 60641 1143697 1918515 31 ## 7 2507 W CERMAK RD NA 1160049 1889322 28 ## 8 7321 S PRINCETON AVE 60621 1175560 1856415 6 ## police_district community_area ssa latitude longitude ## 1 15 25 NA 41.86824 -87.76946 ## 2 23 3 34 41.96628 -87.65349 ## 3 4 46 NA 41.73358 -87.54686 ## 4 4 47 NA 41.72860 -87.59964 ## 5 12 31 NA 41.85588 -87.64027 ## 6 25 19 NA 41.93232 -87.74782 ## 7 10 30 NA 41.85190 -87.68826 ## 8 7 69 NA 41.76110 -87.63196 ## location location_address ## 1 POINT (41.86823989759004 -87.76946043478485) &lt;NA&gt; ## 2 POINT (41.96628368822802 -87.65349140566876) &lt;NA&gt; ## 3 POINT (41.73357538693858 -87.5468638464287) &lt;NA&gt; ## 4 POINT (41.72859955416313 -87.59963819790387) &lt;NA&gt; ## 5 POINT (41.85588399821447 -87.64026997646823) &lt;NA&gt; ## 6 POINT (41.93231981463456 -87.74781719104732) &lt;NA&gt; ## 7 POINT (41.85189851760397 -87.6882562971527) &lt;NA&gt; ## 8 POINT (41.76110443455052 -87.63196391292958) &lt;NA&gt; ## location_city location_state location_zip ## 1 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 2 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 3 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 4 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 5 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 6 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 7 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 8 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; # equivalent to: # filter(vehicle_data, year(creation_data = 2005)) Challenge Filter the data so that you only have observations from September 2016 (how do you filter on multiple criteria at once? Look at the documentation!). Save it to a new dataframe called vehicle_sept16. Check that you’ve done it correctly with head() and dim(). Sometimes, I have more columns in my data than I need. I can choose a few columns, and assign it to a new dataset. First, I get the variable names: names(vehicle_sept16) ## [1] &quot;creation_date&quot; ## [2] &quot;status&quot; ## [3] &quot;completion_date&quot; ## [4] &quot;service_request_number&quot; ## [5] &quot;type_of_service_request&quot; ## [6] &quot;license_plate&quot; ## [7] &quot;vehicle_make_model&quot; ## [8] &quot;vehicle_color&quot; ## [9] &quot;current_activity&quot; ## [10] &quot;most_recent_action&quot; ## [11] &quot;how_many_days_has_the_vehicle_been_reported_as_parked_&quot; ## [12] &quot;street_address&quot; ## [13] &quot;zip_code&quot; ## [14] &quot;x_coordinate&quot; ## [15] &quot;y_coordinate&quot; ## [16] &quot;ward&quot; ## [17] &quot;police_district&quot; ## [18] &quot;community_area&quot; ## [19] &quot;ssa&quot; ## [20] &quot;latitude&quot; ## [21] &quot;longitude&quot; ## [22] &quot;location&quot; ## [23] &quot;location_address&quot; ## [24] &quot;location_city&quot; ## [25] &quot;location_state&quot; ## [26] &quot;location_zip&quot; Then, I extend the code I wrote above: vehicle_final &lt;- vehicle_sept16 %&gt;% select(location_address, zip_code) Or, I can even get rid of the intermediate vehicle_sept16 object! vehicle_final &lt;- vehicle_data %&gt;% filter(year(creation_date) == 2016, month(creation_date) == 9) %&gt;% select(location_address, zip_code) The columns I selected aren’t going to be that useful in terms of performing spatial analysis. Why? Because they’re human understandings of where something is. In order for a computer to understand how to map something. I need something a bit more specific. If that’s all I had, I’d need to geocode my addresses, but thankfully I already have two columns in there with the information I need. Challenge What columns am I interested in? Replace the column names with the proper ones. I can also rename my columns as I select them, for easier typing in the future. vehicle_final &lt;- vehicle_data %&gt;% filter(year(creation_date) == 2016, month(creation_date) == 9) %&gt;% select(comm = community_area, lon = longitude, lat = latitude) Great, now that I’ve narrowed down my dataset, I can convert it into a spatial format accepted by R! (Note: it’s quite normal to need to clean and prepare your data before using it for spatial analysis. That’s a big part of the data analysis workflow.) 12.6 Spatial data time - my favorite part! The workhouse of the modern R spatial toolkit is the sf package. I love it a lot. To convert a table/CSV with latitude and longitude into an sf format, we use the st_as_sf() function, which has a few arguments. vehicle_points &lt;- st_as_sf(vehicle_final, coords = c(&quot;lon&quot;, &quot;lat&quot;), crs = 4326, agr = &quot;constant&quot;) Uh oh, what happened? I got the following error: Error in st_as_sf.data.frame(vehicle_final, coords = c(&quot;lon&quot;, &quot;lat&quot;), : missing values in coordinates not allowed. Challenge I can’t have missing values in my longitude or latitude values! Can you write a filter() statement with the is.na() function to remove the missing lon and lat points from vehicle_final? Save it to vehicle_coord, and check your work with dim() Let’s try again… vehicle_points &lt;- st_as_sf(vehicle_coord, coords = c(&quot;lon&quot;, &quot;lat&quot;), crs = 4326, agr = &quot;constant&quot;) Challenge Check the class() of your new vehicle_points object. Call the plot() function on it! Also call the st_crs() function on it. 12.7 On your own Challenge Can you work through the tutorial here to import spatial data that’s not in data frame format? Stop once you’ve plotted the areas. 12.8 Very important concepts: projection, and spatial join Two of the most important spatial concepts are projections, and spatial joins (not to be confused with attribute joins). You can read Luc’s notes to understand what’s going on, but here are two graphics to explain what’s going on. The two key functions you need to know are: st_transform() st_join() Good luck with the rest of the tutorial! "],
["basic-mapping.html", "Chapter 13 Basic Mapping 13.1 Outline of Today’s Workshop 13.2 Spatial Data Handling, fin 13.3 Finding Spatial Data 13.4 Basic Mapping", " Chapter 13 Basic Mapping 13.1 Outline of Today’s Workshop We’ll be doing the following few things: finishing up Spatial Data Handling discussing finding open-source geospatial data, then working from this Basic Mapping lab tutorial. 13.2 Spatial Data Handling, fin There’s a long section in the tutorial about PDF scraping. If you’ve already done it, sorry! I just put together a data package that you can install to use with these tutorials. Install the package with: # install.packages(&quot;remotes&quot;) remotes::install_github(&quot;spatialanalysis/geodaData&quot;) Then, you can pull up the community area data with population attached with: library(geodaData) library(sf) data(&quot;chicago_comm&quot;) 13.3 Finding Spatial Data Based on a question from last week, I put together a list with some sources of spatial data. Question What type of spatial data are you interested in using for your research? Please write down the research question and the type of data you are thinking about using here! Question Where do you think you might be able to find that geospatial data? Take 5 minutes to do a search, discuss with a partner, and jot down your ideas here! I’m moving to mapping to make sure we cover the necessary spatial concepts, as some of the exploratory data analysis you may have already encountered. We may go back to the multivariate analysis next week, if time. Question How many people feel comfortable with ggplot already? How many people can run a regression in R? 13.4 Basic Mapping We’ll start where we left off last week on Basic Mapping. (We’re running a bit behind schedule, but thank you for asking good questions!) To use the NYC boundary data included in the tutorial, run the following code: library(geodaData) library(sf) head(nyc_sf) ## Simple feature collection with 6 features and 34 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: 913037.2 ymin: 120117 xmax: 1025633 ymax: 230204.7 ## epsg (SRID): 2263 ## proj4string: +proj=lcc +lat_1=41.03333333333333 +lat_2=40.66666666666666 +lat_0=40.16666666666666 +lon_0=-74 +x_0=300000.0000000001 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ## # A tibble: 6 x 35 ## bor_subb name code subborough forhis06 forhis07 forhis08 forhis09 ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 501 Nort… 501 North Sho… 37.1 34.0 27.4 29.3 ## 2 502 Mid-… 502 Mid-Island 28.0 18.1 24.0 31.2 ## 3 503 Sout… 503 South Sho… 10.7 12.1 9.69 14.7 ## 4 401 Asto… 401 Astoria 52.1 54.0 54.7 47.8 ## 5 402 Sunn… 402 Sunnyside… 62.7 69.4 67.1 58.3 ## 6 403 Jack… 403 Jackson H… 68.5 68.5 66.5 69.2 ## # … with 27 more variables: forwh06 &lt;dbl&gt;, forwh07 &lt;dbl&gt;, forwh08 &lt;dbl&gt;, ## # forwh09 &lt;dbl&gt;, hhsiz1990 &lt;dbl&gt;, hhsiz00 &lt;dbl&gt;, hhsiz02 &lt;dbl&gt;, ## # hhsiz05 &lt;dbl&gt;, hhsiz08 &lt;dbl&gt;, kids2000 &lt;dbl&gt;, kids2005 &lt;dbl&gt;, ## # kids2006 &lt;dbl&gt;, kids2007 &lt;dbl&gt;, kids2008 &lt;dbl&gt;, kids2009 &lt;dbl&gt;, ## # rent2002 &lt;dbl&gt;, rent2005 &lt;dbl&gt;, rent2008 &lt;dbl&gt;, rentpct02 &lt;dbl&gt;, ## # rentpct05 &lt;dbl&gt;, rentpct08 &lt;dbl&gt;, pubast90 &lt;dbl&gt;, pubast00 &lt;dbl&gt;, ## # yrhom02 &lt;dbl&gt;, yrhom05 &lt;dbl&gt;, yrhom08 &lt;dbl&gt;, geometry &lt;MULTIPOLYGON ## # [US_survey_foot]&gt; Question Take a few minutes and try to understand what the NYC data is about. How many observations and variables are there? What data is stored? (dim(), str(), head(), summary()) What does the metadata tell you about this data? (?nyc_sf) What geometries are in this data? Can you make a quick map with plot()? What coordinate reference system is there? Is this data projected? (st_crs()) Can you Google the EPSG code and figure out what it means? We’ll be working with the tmap R package today. Some resources I find useful for tmap include: the tmap examples the Geocomputation with R site Load the library: library(tmap) tm_shape(nyc_sf) + tm_polygons(&quot;rent2008&quot;) Question Try using tm_fill() or tm_borders() in place of tm_polygons(). Can you produce the same thing as tm_polygons() with these two functions? There are multiple ways to do the same thing in R! In this case, tm_polygons() is a superset of tm_fill() and tm_borders(). 13.4.1 Adding a basemap If you want a basemap for your map, change the tmap_mode to “view”. tmap_mode(&quot;view&quot;) ## tmap mode set to interactive viewing tm_shape(nyc_sf) + tm_polygons(&quot;rent2008&quot;) Want a prettier basemap? R can connect to other map servers. You can preview basemaps and find their names at this Leaflet Provider Demo. You can also pull up a list of all the providers with leaflet::providers. tm_shape(nyc_sf) + tm_polygons(&quot;rent2008&quot;) + tm_basemap(server = &quot;OpenStreetMap&quot;) 13.4.2 Customizing tmap function parameters Each tm_ function has arguments you can set to other things. This allows you to change the color, the transparency, the outlines, the labels, and more. All this customization is very powerful! Question Can you look up the help documentation of tm_polygons with ?tm_polygons? Which parameter controls transparency? How would you change the title of the legend to something else? I can’t teach you everything in a workshop, so the best thing I can leave you with is an ability to poke through R documentation to find what you need. 13.4.3 Adding a histogram Certain functionalities are only available in plotting mode, like adding a histogram of the data: tmap_mode(&quot;plot&quot;) ## tmap mode set to plotting tm_shape(nyc_sf) + tm_polygons(&quot;rent2008&quot;, legend.hist = TRUE) 13.4.4 Getting our map ready for production In order to do our final tweaking, we need to do things to the map as a whole. In this case, we’ll use tm_layout(), as we’re not working on one specific aspect of the map. Question Look up tm_layout() in the R documentation. (Get ready to be overwhelmed by the options.) What other customizations exist? We can add a title with title =. tm_shape(nyc_sf) + tm_polygons(&quot;rent2008&quot;, legend.hist = TRUE) + tm_layout(title = &quot;Rent 2008 NYC Sub-Boroughs&quot;) A schematic to clarify how this works: Question Try some of the following changes: Add a compass and a scale bar Move the legend outside Move the title outside and center it (try main.title()) 13.4.5 Using Examples It’s sometimes easier to look for examples, and replicate that code than digging through the documentation. Question Can you try to replicate one of the map styles in the tmap examples (here’s the code used to create them), using the NYC data we just worked with? Take a few minutes and try it out! "],
["spatial-autocorrelation.html", "Chapter 14 Spatial Autocorrelation 14.1 Install packages 14.2 Review from previous workshops 14.3 Spatial autocorrelation 14.4 Do it in R 14.5 Second order contiguity weights 14.6 Distance-Band Spatial Weights 14.7 Connectivity histograms", " Chapter 14 Spatial Autocorrelation 14.1 Install packages Make sure you have the spdep package installed: install.packages(&quot;spdep&quot;) I also developed a helper package for some of this spatial autocorrelation stuff, called sfExtras. Install with: # install.packages(&quot;remotes&quot;) remotes::install_github(&quot;spatialanalysis/sfExtras&quot;) 14.2 Review from previous workshops We’ll be working with a new dataset, called “ncovr”. Go ahead and load it with geodaData: library(geodaData) library(sf) head(ncovr) ## Simple feature collection with 6 features and 69 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -120.8746 ymin: 47.79012 xmax: -94.43044 ymax: 49.37173 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +datum=WGS84 +no_defs ## NAME STATE_NAME STATE_FIPS CNTY_FIPS FIPS STFIPS COFIPS ## 1 Lake of the Woods Minnesota 27 077 27077 27 77 ## 2 Ferry Washington 53 019 53019 53 19 ## 3 Stevens Washington 53 065 53065 53 65 ## 4 Okanogan Washington 53 047 53047 53 47 ## 5 Pend Oreille Washington 53 051 53051 53 51 ## 6 Boundary Idaho 16 021 16021 16 21 ## FIPSNO SOUTH HR60 HR70 HR80 HR90 HC60 HC70 ## 1 27077 0 0.000000 0.000000 8.855827 0.000000 0.0000000 0.0000000 ## 2 53019 0 0.000000 0.000000 17.208742 15.885624 0.0000000 0.0000000 ## 3 53065 0 1.863863 1.915158 3.450775 6.462453 0.3333333 0.3333333 ## 4 53047 0 2.612330 1.288643 3.263814 6.996502 0.6666667 0.3333333 ## 5 53051 0 0.000000 0.000000 7.770008 7.478033 0.0000000 0.0000000 ## 6 16021 0 0.000000 0.000000 4.573101 4.000640 0.0000000 0.0000000 ## HC80 HC90 PO60 PO70 PO80 PO90 RD60 RD70 ## 1 0.3333333 0.0000000 4304 3987 3764 4076 -0.1751055 -0.1965356 ## 2 1.0000000 1.0000000 3889 3655 5811 6295 -0.8368683 -0.8478556 ## 3 1.0000000 2.0000000 17884 17405 28979 30948 -0.5373716 -0.2252831 ## 4 1.0000000 2.3333333 25520 25867 30639 33350 -0.8201698 -0.3911261 ## 5 0.6666667 0.6666667 6914 6025 8580 8915 -0.9361701 -0.4514569 ## 6 0.3333333 0.3333333 5809 5484 7289 8332 -0.8503190 -0.6301795 ## RD80 RD90 PS60 PS70 PS80 PS90 UE60 ## 1 -0.36285011 -0.8027737 -1.4499461 -1.4625594 -1.5851232 -1.4955070 7.9 ## 2 0.11932743 -0.1354830 -1.7072056 -1.6977199 -1.4440801 -1.3610839 8.2 ## 3 -0.51119686 -0.2765439 -0.5681465 -0.5918834 -0.3154613 -0.2831232 10.1 ## 4 -0.08242177 0.3707621 -0.5549386 -0.5520160 -0.5253836 -0.4724997 7.5 ## 5 -0.28951626 0.1079923 -1.1064386 -1.1817536 -1.0122015 -0.9719778 10.6 ## 6 -0.12031784 -0.5515577 -1.2083943 -1.2194174 -1.0980090 -0.9876962 10.8 ## UE70 UE80 UE90 DV60 DV70 DV80 DV90 MA60 MA70 ## 1 9.0 5.902579 3.89479 1.858974 2.619808 3.746594 7.388535 28.8 30.5 ## 2 15.4 15.422886 16.81159 2.863278 3.686007 6.625442 11.543135 25.9 27.1 ## 3 9.0 13.574064 10.70079 2.711447 2.976378 5.448223 9.123212 29.6 31.8 ## 4 10.5 12.700195 10.20354 3.372041 4.090386 7.122333 9.245627 29.4 31.1 ## 5 13.4 18.148999 14.99102 3.008988 4.010695 5.287860 10.158351 31.2 33.8 ## 6 12.1 16.395711 11.37951 2.590420 3.489399 6.071152 8.477287 27.6 30.3 ## MA80 MA90 POL60 POL70 POL80 POL90 DNL60 DNL70 ## 1 34.5 35.5 8.367300 8.290794 8.233238 8.312871 1.188755 1.1122489 ## 2 27.2 32.8 8.265907 8.203851 8.667508 8.747511 0.568786 0.5067301 ## 3 28.7 34.5 9.791662 9.764513 10.274327 10.340064 1.975245 1.9480958 ## 4 31.2 35.0 10.147218 10.160723 10.330029 10.414813 1.571567 1.5850725 ## 5 31.3 36.1 8.841304 8.703673 9.057189 9.095491 1.595649 1.4580177 ## 6 29.2 32.8 8.667164 8.609590 8.894122 9.027859 1.516462 1.4588886 ## DNL80 DNL90 MFIL59 MFIL69 MFIL79 MFIL89 FP59 FP69 ## 1 1.0660453 1.145294 8.220134 8.708309 9.551729 10.27921 36.3 16.1 ## 2 0.9712953 1.049482 8.519790 9.006754 9.679719 10.25397 22.5 11.6 ## 3 2.4623128 2.524736 8.403352 8.868835 9.739379 10.26270 30.9 15.9 ## 4 1.7581014 1.845350 8.479907 8.969923 9.715228 10.04962 25.0 12.9 ## 5 1.8129617 1.850906 8.508354 8.895219 9.648466 10.11144 26.7 18.3 ## 6 1.7488466 1.882032 8.423102 8.946505 9.604745 10.13809 27.2 11.1 ## FP79 FP89 BLK60 BLK70 BLK80 BLK90 GI59 ## 1 13.37047 8.51419 0.44144981 0.47654878 0.05313496 0.02453386 0.2852352 ## 2 18.63395 17.52451 0.07714065 2.29822161 0.55067975 0.31771247 0.2561578 ## 3 11.22669 13.58268 0.07828226 0.09192761 0.09317092 0.21002973 0.2839986 ## 4 12.19627 16.94620 0.09796238 0.28221286 0.10117824 0.15592204 0.2585395 ## 5 12.59607 15.93098 0.02892682 0.01659751 0.06993007 0.13460460 0.2432630 ## 6 14.78873 10.63830 0.00000000 0.05470460 0.04115791 0.03600576 0.2619386 ## GI69 GI79 GI89 FH60 FH70 FH80 FH90 ## 1 0.3723362 0.3421036 0.3364546 11.279621 5.4 5.663881 9.515860 ## 2 0.3606654 0.3619284 0.3606395 10.053476 2.6 10.079576 11.397059 ## 3 0.3940829 0.3575660 0.3699418 9.258437 5.6 6.812127 10.352015 ## 4 0.3712182 0.3812402 0.3945189 9.039900 8.1 10.084926 12.840340 ## 5 0.3656141 0.3587056 0.3878477 8.243930 4.1 7.557643 10.313002 ## 6 0.3503514 0.3559135 0.3405252 7.112971 6.8 8.249497 9.343201 ## geometry ## 1 MULTIPOLYGON (((-95.34258 4... ## 2 MULTIPOLYGON (((-118.8505 4... ## 3 MULTIPOLYGON (((-117.4378 4... ## 4 MULTIPOLYGON (((-118.971 47... ## 5 MULTIPOLYGON (((-117.4375 4... ## 6 MULTIPOLYGON (((-117.028 48... Question Take a few minutes and try to understand what this is about. How many observations and variables are there? What data is stored? (dim(), str(), head(), summary()) What does the metadata tell you about this data? (?ncovr) What geometries are in this data? Can you make a quick map with plot()? What coordinate reference system is there? Is this data projected? (st_crs()) Question Try to make a simple map of one of the attributes of interest (homicides, etc) with tmap. Can you make it interactive? 14.3 Spatial autocorrelation We’ll start by talking about spatial weights. There are two main types of spatial weights, contiguity and distance based weights. We’ll focus on contiguity today: aka, that a spatial unit shares a border with another spatial unit. We look at rook vs. queen contiguity. There’s also second order contiguity: How we define “neighbors” matters when we are trying to determine spatial autocorrelation. 14.4 Do it in R Load two more libraries: library(sfExtras) library(spdep) We’ll be using the following functions (potentially buggy): ?st_rook ?st_queen ?st_as_nb ?st_centroid_coords # for mapping the weights The code we wrote last week to calculate weights: library(tmap) tm_shape(ncovr) + tm_polygons(&quot;HR60&quot;) ncovr_rook &lt;- st_rook(ncovr) ## although coordinates are longitude/latitude, st_relate_pattern assumes that they are planar ncovr_queen &lt;- st_queen(ncovr) ## although coordinates are longitude/latitude, st_relate_pattern assumes that they are planar # check average number of neighbors per county rook_neighbors &lt;- lengths(ncovr_rook) queen_neighbors &lt;- lengths(ncovr_queen) mean(rook_neighbors) # 5.6 ish ## [1] 5.571475 mean(queen_neighbors) # 5.8 ish ## [1] 5.889141 # convert lists of neighbors to &quot;nb&quot; object to make map rook_nb &lt;- st_as_nb(ncovr_rook) summary(rook_nb) ## Neighbour list object: ## Number of regions: 3085 ## Number of nonzero links: 17188 ## Percentage nonzero weights: 0.1805989 ## Average number of links: 5.571475 ## Link number distribution: ## ## 1 2 3 4 5 6 7 8 9 10 11 13 ## 24 41 108 377 863 1007 484 136 37 6 1 1 ## 24 least connected regions: ## 45 49 585 643 837 1197 1377 1402 1442 1464 1470 1523 1531 1532 1543 1596 1605 1653 1737 1767 1775 2892 2893 2919 with 1 link ## 1 most connected region: ## 606 with 13 links queen_nb &lt;- st_as_nb(ncovr_queen) summary(queen_nb) ## Neighbour list object: ## Number of regions: 3085 ## Number of nonzero links: 18168 ## Percentage nonzero weights: 0.190896 ## Average number of links: 5.889141 ## Link number distribution: ## ## 1 2 3 4 5 6 7 8 9 10 11 13 14 ## 24 36 91 281 620 1037 704 227 50 11 2 1 1 ## 24 least connected regions: ## 45 49 585 643 837 1197 1377 1402 1442 1464 1470 1523 1531 1532 1543 1596 1605 1653 1737 1767 1775 2892 2893 2919 with 1 link ## 1 most connected region: ## 1371 with 14 links centroid_coords &lt;- st_centroid_coords(ncovr) plot(queen_nb, centroid_coords, lwd = 0.2, cex = 0.5, col = &quot;blue&quot;) 14.5 Second order contiguity weights 14.6 Distance-Band Spatial Weights To match the GeoDa documentation, we’ll be using a dataset called “clev_pts”. Go ahead and load it with geodaData (if you can’t, you can download it from the Data and Lab website): library(geodaData) library(sf) head(clev_pts) ## Simple feature collection with 6 features and 9 fields ## geometry type: POINT ## dimension: XY ## bbox: xmin: 2177090 ymin: 662872 xmax: 2182100 ymax: 663462 ## epsg (SRID): 3734 ## proj4string: +proj=lcc +lat_1=41.7 +lat_2=40.43333333333333 +lat_0=39.66666666666666 +lon_0=-82.5 +x_0=600000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=us-ft +no_defs ## unique_id parcel x y sale_price tract10int Quarter year1 ## 1 1183 002-02-036 2177340 663165 235500 101200 4 2015 ## 2 1198 002-02-053 2177090 662872 65000 101200 4 2015 ## 3 1516 002-14-053 2182100 663462 92000 103500 4 2015 ## 4 1606 002-15-038 2181090 663162 5000 103400 4 2015 ## 5 1612 002-15-043 2181090 663380 116250 103400 4 2015 ## 6 1624 002-16-003 2180350 663301 120000 103100 4 2015 ## yrquarter geometry ## 1 154 POINT (2177340 663165) ## 2 154 POINT (2177090 662872) ## 3 154 POINT (2182100 663462) ## 4 154 POINT (2181090 663162) ## 5 154 POINT (2181090 663380) ## 6 154 POINT (2180350 663301) Question Take a few minutes and try to understand what this is about. How many observations and variables are there? What data is stored? (dim(), str(), head(), summary()) What does the metadata tell you about this data? (?clev_pts) What geometries are in this data? Can you make a quick map with plot()? What coordinate reference system is there? Is this data projected? (st_crs()) Question Try to make a simple map of one of the attributes of interest (homicides, etc) with tmap. Can you make it interactive? There are two ways to go about doing distance-based spatial weights, as mentioned in the GeoDa documentation: Determine a distance band under which something is considered a neighbor (see below) Determine the number of neighbors each point should have (distances will vary) We’ll start with the first. ?dnearneigh Let’s specify a bandwidth of 1000. dnearneigh(clev_pts, 0, 1000) ## Neighbour list object: ## Number of regions: 205 ## Number of nonzero links: 314 ## Percentage nonzero weights: 0.7471743 ## Average number of links: 1.531707 ## 55 regions with no links: ## 3 16 18 20 22 29 30 36 37 55 56 57 58 59 63 64 92 96 111 112 116 117 118 120 121 131 139 140 141 142 145 148 149 150 151 152 153 154 155 156 157 160 163 164 165 166 167 173 174 187 190 197 198 199 200 Question What units does “1000” refer to? (Hint: check with st_crs!) We can plot this to get a sense of what’s going on. Remember, the syntax for plot() is plot(nb, coord_matrix, options). dist_1000_nb &lt;- dnearneigh(clev_pts, 0, 1000) plot(dist_1000_nb, st_coordinates(clev_pts), lwd=.2, col=&quot;blue&quot;, cex = .5) Notice how a lot of points are missing neighbors? They’re referred to as “isolates”. Maybe we want to specify a minimum distance so that each point has a neighbor. This is referred to as the critical threshold. If we want each point to have one neighbor, we can use knearneigh. This (older function) takes in a matrix and returns a matrix, so we need to convert formats. knn_matrix &lt;- knearneigh(st_coordinates(clev_pts)) To convert this matrix into a familiar nb, we use knn2nb: knn2nb(knn_matrix) ## Neighbour list object: ## Number of regions: 205 ## Number of nonzero links: 205 ## Percentage nonzero weights: 0.4878049 ## Average number of links: 1 ## Non-symmetric neighbours list Now when we plot again, we see each point has a neighbor: k1_nb &lt;- knn2nb(knn_matrix) plot(k1_nb, st_coordinates(clev_pts), lwd=.2, col=&quot;blue&quot;, cex = .5) Each point has exactly one neighbor here. Question Can you set it so that each point has 6 neighbors? Plot it! Now let’s try doing something different: setting the distance band equal to the critical threshold in dnearneigh(). The nbdists function will give us the distance between a point and its closest neighbor. nbdists(k1_nb, st_coordinates(clev_pts)) Question Can you find the maximum distance in this list and assign it to a variable called critical_thres? Can you put it into the dnearneigh function and plot a map where we have a fixed distance band of the critical threshold? 14.7 Connectivity histograms When doing distance band weights, points have different numbers of neighbors, unlike in k-nearest weights. Let’s get the cardinality (aka number of neighbors) for each observation card(dist_crit_nb) ## [1] 9 9 15 15 15 17 15 15 19 18 20 20 20 19 14 17 17 19 13 3 9 10 7 ## [24] 6 6 12 10 10 10 13 16 17 12 16 14 17 9 11 13 11 16 14 17 17 18 13 ## [47] 13 17 18 16 16 24 27 22 17 8 7 5 0 11 11 11 11 11 13 13 13 13 13 ## [70] 16 16 14 14 13 13 10 10 9 10 23 25 32 28 28 26 23 23 32 23 23 21 24 ## [93] 18 18 17 21 15 20 20 22 19 22 22 19 16 18 20 19 19 23 19 29 30 1 1 ## [116] 1 1 3 5 3 3 4 9 9 9 9 11 10 11 13 11 8 9 12 16 10 9 7 ## [139] 6 6 3 6 8 8 7 7 7 4 6 5 5 3 2 2 2 7 8 8 10 8 6 ## [162] 3 2 2 3 2 6 7 8 10 14 14 12 17 16 16 20 19 19 13 17 13 15 12 ## [185] 11 14 5 8 9 8 10 12 6 5 4 3 4 1 9 4 13 13 15 15 17 Question What’s the most common number of neighbors? Try making a ggplot histogram out of this, too. "],
["spatial-autocorrelation-with-rgeoda.html", "Chapter 15 Spatial Autocorrelation with rgeoda 15.1 Install packages 15.2 R Markdown 15.3 Load data 15.4 Working with rgeoda 15.5 Spatial Analysis with rgeoda 15.6 Calculating the Local Moran statistic", " Chapter 15 Spatial Autocorrelation with rgeoda This section of workshop notes is based off of the rgeoda documentation. This package is still in alpha, so the functionality may change. However, you are free to use it for a project for Luc’s class. 15.1 Install packages Install the alpha version of rgeoda: # install.packages(&quot;remotes&quot;) remotes::install_github(&quot;lixun910/rgeoda&quot;) This will install a package that has the same internals as GeoDa, but can be accessed from R. It exposes a lot of functionality that can be hard to manage in R. You should now be able to load the package with: library(rgeoda) ## ## Attaching package: &#39;rgeoda&#39; ## The following object is masked from &#39;package:spdep&#39;: ## ## skater 15.2 R Markdown We’ll be working in a R Markdown document today instead of a script. This allows for “literate code” (aka, you can write text along with code - it’s how these workshop notes are written). Learn more about R Markdown with this tutorial. To create a new R Markdown file, click File &gt; New File &gt; R Markdown. The R Markdown cheatsheet and guide can be found under Help &gt; Cheatsheets &gt; R Markdown Cheat Sheet / Reference Guide. 15.3 Load data We’ll first load in sample data from the rgeoda package. library(geodaData) library(rgeoda) # if this doesn&#39;t work, have you installed rgeoda from Github? guerry_sf &lt;- geodaData::guerry Question Take a few minutes and try to understand what this data is. How many observations and variables are there? What data is stored? (dim(), str(), head(), summary()) What does the metadata tell you about this data? (?guerry) What geometries are in this data? Can you make a quick map with plot()? What coordinate reference system is there? Is this data projected? (st_crs()) Question Try to make a simple map of one of the attributes of interest with tmap. Can you make it interactive? 15.4 Working with rgeoda This workshop is based off of the rgeoda documentation book. rgeoda is still in alpha, so please let me know if you run into anything funky! You can also record any issues you have on the Github repository. 15.4.1 Convert to rgeoda object We can convert an sf object into a rgeoda object: guerry &lt;- sf_to_geoda(guerry_sf) ## Loading required package: wkb guerry ## Reference class object of class &quot;geoda&quot; ## Field &quot;gda&quot;: ## An object of class &quot;_p_GeoDa&quot; ## Slot &quot;ref&quot;: ## &lt;pointer: 0x7feffe016560&gt; ## ## Field &quot;map_type&quot;: ## [1] &quot;polygon_type&quot; ## Field &quot;n_cols&quot;: ## [1] 0 ## Field &quot;n_obs&quot;: ## [1] 85 ## Field &quot;field_names&quot;: ## character(0) ## Field &quot;field_types&quot;: ## character(0) ## Field &quot;table&quot;: ## data frame with 0 columns and 85 rows Where did our data go? By default, the sf-to-rgeoda conversion removes the attributes (for faster processing with queen weights, local Moran, etc.). Set with_table() to TRUE to get the dataframe. guerry &lt;- sf_to_geoda(guerry_sf, with_table = TRUE) guerry ## Reference class object of class &quot;geoda&quot; ## Field &quot;gda&quot;: ## An object of class &quot;_p_GeoDa&quot; ## Slot &quot;ref&quot;: ## &lt;pointer: 0x7feff214fd10&gt; ## ## Field &quot;map_type&quot;: ## [1] &quot;polygon_type&quot; ## Field &quot;n_cols&quot;: ## [1] 26 ## Field &quot;n_obs&quot;: ## [1] 85 ## Field &quot;field_names&quot;: ## [1] &quot;CODE_DE&quot; &quot;COUNT&quot; &quot;AVE_ID_&quot; &quot;dept&quot; &quot;Region&quot; &quot;Dprtmnt&quot; &quot;Crm_prs&quot; ## [8] &quot;Crm_prp&quot; &quot;Litercy&quot; &quot;Donatns&quot; &quot;Infants&quot; &quot;Suicids&quot; &quot;MainCty&quot; &quot;Wealth&quot; ## [15] &quot;Commerc&quot; &quot;Clergy&quot; &quot;Crm_prn&quot; &quot;Infntcd&quot; &quot;Dntn_cl&quot; &quot;Lottery&quot; &quot;Desertn&quot; ## [22] &quot;Instrct&quot; &quot;Prsttts&quot; &quot;Distanc&quot; &quot;Area&quot; &quot;Pop1831&quot; ## Field &quot;field_types&quot;: ## [1] &quot;string&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;string&quot; &quot;string&quot; &quot;numeric&quot; ## [8] &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; ## [15] &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; ## [22] &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; ## Field &quot;table&quot;: ## CODE_DE COUNT AVE_ID_ dept Region Dprtmnt Crm_prs ## NA 01 1 49 1 E Ain 28870 ## NA.1 02 1 812 2 N Aisne 26226 ## NA.2 03 1 1418 3 C Allier 26747 ## NA.3 04 1 1603 4 E Basses-Alpes 12935 ## NA.4 05 1 1802 5 E Hautes-Alpes 17488 ## NA.5 07 1 2249 7 S Ardeche 9474 ## NA.6 08 1 35395 8 N Ardennes 35203 ## NA.7 09 1 2526 9 S Ariege 6173 ## NA.8 10 1 34410 10 E Aube 19602 ## NA.9 11 1 2807 11 S Aude 15647 ## NA.10 12 1 3369 12 S Aveyron 8236 ## NA.11 13 1 3515 13 S Bouches-du-Rhone 13409 ## NA.12 14 1 3667 14 N Calvados 17577 ## NA.13 15 1 4268 15 C Cantal 18070 ## NA.14 16 1 4527 16 W Charente 24964 ## NA.15 17 1 5205 17 W Charente-Inferieure 18712 ## NA.16 18 1 5417 18 C Cher 21934 ## NA.17 19 1 5942 19 C Correze 15262 ## NA.18 21 1 6174 21 E Cote-d&#39;Or 32256 ## NA.19 22 1 33634 22 W Cotes-du-Nord 28607 ## NA.20 23 1 6735 23 C Creuse 37014 ## NA.21 24 1 7186 24 W Dordogne 21585 ## NA.22 25 1 7482 25 E Doubs 11560 ## NA.23 26 1 8370 26 E Drome 13396 ## NA.24 27 1 8612 27 N Eure 14795 ## NA.25 28 1 9143 28 C Eure-et-Loir 21368 ## NA.26 29 1 9659 29 W Finistere 29872 ## NA.27 30 1 10264 30 S Gard 13115 ## NA.28 31 1 10962 31 S Haute-Garonne 18642 ## NA.29 32 1 11008 32 S Gers 18642 ## NA.30 33 1 11520 33 W Gironde 24096 ## NA.31 34 1 12162 34 S Herault 12814 ## NA.32 35 1 12532 35 W Ille-et-Vilaine 22138 ## NA.33 36 1 12687 36 C Indre 32404 ## NA.34 37 1 13147 37 C Indre-et-Loire 19131 ## NA.35 38 1 13341 38 E Isere 18785 ## NA.36 39 1 13977 39 E Jura 26221 ## NA.37 40 1 14431 40 W Landes 17687 ## NA.38 41 1 14589 41 C Loir-et-Cher 21292 ## NA.39 42 1 15070 42 C Loire 27491 ## NA.40 43 1 15339 43 C Haute-Loire 16170 ## NA.41 44 1 15550 44 W Loire-Inferieure 19314 ## NA.42 45 1 15881 45 C Loiret 17722 ## NA.43 46 1 16029 46 S Lot 5883 ## NA.44 47 1 16326 47 W Lot-et-Garonne 22969 ## NA.45 48 1 16732 48 S Lozere 7710 ## NA.46 49 1 16834 49 W Maine-et-Loire 29692 ## NA.47 50 1 17502 50 N Manche 31078 ## NA.48 51 1 36143 51 N Marne 15602 ## NA.49 52 1 34913 52 E Haute-Marne 26231 ## NA.50 53 1 17708 53 W Mayenne 28331 ## NA.51 54 1 18215 54 E Meurthe 26674 ## NA.52 55 1 18431 55 N Meuse 24507 ## NA.53 56 1 19153 56 W Morbihan 23316 ## NA.54 57 1 19575 57 N Moselle 12153 ## NA.55 58 1 20037 58 C Nievre 25087 ## NA.56 59 1 36521 59 N Nord 26740 ## NA.57 60 1 20823 60 N Oise 28180 ## NA.58 61 1 21456 61 N Orne 28329 ## NA.59 62 1 21990 62 N Pas-de-Calais 23101 ## NA.60 63 1 22829 63 C Puy-de-Dome 17256 ## NA.61 64 1 23572 64 W Basses-Pyrenees 16722 ## NA.62 65 1 24112 65 S Hautes-Pyrenees 12223 ## NA.63 66 1 24280 66 S Pyrenees-Orientales 6728 ## NA.64 67 1 24814 67 E Bas-Rhin 12309 ## NA.65 68 1 24947 68 E Haut-Rhin 7343 ## NA.66 69 1 25381 69 E Rhone 18793 ## NA.67 70 1 26063 70 E Haute-Saone 22339 ## NA.68 71 1 26357 71 E Saone-et-Loire 28391 ## NA.69 72 1 26842 72 C Sarthe 33913 ## NA.70 75 4 31560 75 N Seine 13945 ## NA.71 76 1 28118 76 N Seine-Inferieure 18355 ## NA.72 77 1 28566 77 N Seine-et-Marne 22201 ## NA.73 78 3 31598 78 N Seine-et-Oise 12477 ## NA.74 79 1 29204 79 W Deux-Sevres 18400 ## NA.75 80 1 29360 80 N Somme 33592 ## NA.76 81 1 30128 81 S Tarn 13019 ## NA.77 82 1 30546 82 S Tarn-et-Garonne 14790 ## NA.78 83 1 30753 83 S Var 13145 ## NA.79 84 1 30777 84 S Vaucluse 13576 ## NA.80 85 1 31097 85 W Vendee 20827 ## NA.81 86 1 31387 86 W Vienne 15010 ## NA.82 87 1 31564 87 C Haute-Vienne 16256 ## NA.83 88 1 31810 88 E Vosges 18835 ## NA.84 89 1 32129 89 C Yonne 18006 ## Crm_prp Litercy Donatns Infants Suicids MainCty Wealth Commerc ## NA 15890 37 5098 33120 35039 2 73 58 ## NA.1 5521 51 8901 14572 12831 2 22 10 ## NA.2 7925 13 10973 17044 114121 2 61 66 ## NA.3 7289 46 2733 23018 14238 1 76 49 ## NA.4 8174 69 6962 23076 16171 1 83 65 ## NA.5 10263 27 3188 42117 52547 1 84 1 ## NA.6 8847 67 6400 16106 26198 2 33 4 ## NA.7 9597 18 3542 22916 123625 1 72 60 ## NA.8 4086 59 3608 18642 10989 2 14 3 ## NA.9 10431 34 2582 20225 66498 2 17 35 ## NA.10 6731 31 3211 21981 116671 2 50 70 ## NA.11 5291 38 2314 9325 8107 3 2 26 ## NA.12 4500 52 27830 8983 31807 2 10 48 ## NA.13 11645 31 4093 15335 87338 2 59 7 ## NA.14 13018 36 13602 19454 25720 2 86 47 ## NA.15 5357 39 13254 23999 16798 2 18 5 ## NA.16 10503 13 9561 23574 19497 2 63 56 ## NA.17 12949 12 14993 19330 47480 2 74 80 ## NA.18 9159 60 2540 15599 16128 2 16 12 ## NA.19 7050 16 10387 36098 75056 2 70 86 ## NA.20 20235 23 10997 14363 77823 1 78 82 ## NA.21 10237 18 4687 21375 36024 2 60 72 ## NA.22 5914 73 3436 12512 40690 2 31 57 ## NA.23 7759 42 2829 16348 23816 2 66 41 ## NA.24 4774 51 11712 16039 13493 2 20 17 ## NA.25 4016 54 4553 14475 15015 2 11 21 ## NA.26 6842 15 23945 28392 25143 2 36 84 ## NA.27 7990 40 3048 28726 18292 2 26 31 ## NA.28 7204 31 2286 15378 56140 3 23 40 ## NA.29 10486 38 2848 15250 61510 2 40 30 ## NA.30 7423 40 5076 10676 19220 3 8 20 ## NA.31 10954 45 1680 21346 30869 2 12 34 ## NA.32 6524 25 7686 40736 45180 2 55 77 ## NA.33 7624 17 11315 20046 25014 2 54 55 ## NA.34 6909 27 7254 16601 15272 2 27 25 ## NA.35 8326 29 4077 12236 36275 2 65 46 ## NA.36 8059 73 3012 20384 34476 2 62 54 ## NA.37 6170 28 12059 15302 35375 1 81 68 ## NA.38 6017 27 5626 13364 14417 2 19 23 ## NA.39 12665 29 3446 29605 71364 2 24 79 ## NA.40 18043 21 2746 31017 163241 2 75 85 ## NA.41 9392 24 8310 14097 27289 3 80 76 ## NA.42 5042 42 4753 9986 11813 2 9 24 ## NA.43 9049 24 5194 20383 48783 2 42 67 ## NA.44 8943 31 4432 17681 38501 2 7 53 ## NA.45 5990 27 2040 25157 11092 1 77 69 ## NA.46 8520 23 4410 18708 33358 2 34 52 ## NA.47 7424 43 5179 14281 55564 2 32 73 ## NA.48 4950 63 3963 11267 8334 2 13 6 ## NA.49 9539 72 4013 17507 19586 1 25 7 ## NA.50 9198 19 2107 18544 28331 2 38 75 ## NA.51 6831 68 3912 12355 15652 2 57 11 ## NA.52 9190 74 4196 17333 13463 2 52 2 ## NA.53 7940 14 14739 31754 34196 2 48 81 ## NA.54 4529 57 9515 13877 25572 3 53 19 ## NA.55 8236 20 10452 19747 29381 2 44 33 ## NA.56 6175 45 6092 8926 13851 3 28 38 ## NA.57 6659 54 5501 18021 5994 2 15 14 ## NA.58 8248 45 9242 20852 34069 2 35 62 ## NA.59 4040 49 5740 10575 15400 2 45 39 ## NA.60 12141 19 5963 22948 78148 2 51 78 ## NA.61 8533 47 3299 12393 65995 2 79 71 ## NA.62 9797 53 6001 12125 148039 2 85 51 ## NA.63 7632 31 11644 15167 37843 2 71 37 ## NA.64 4920 62 14472 14356 18623 3 46 16 ## NA.65 4915 71 6001 14783 21233 2 58 29 ## NA.66 4504 45 1983 3910 17003 3 6 18 ## NA.67 7770 59 11701 11850 39714 1 69 27 ## NA.68 10708 32 3710 20442 22184 2 49 61 ## NA.69 8294 30 3357 10779 29280 2 41 45 ## NA.70 1368 71 4204 2660 3632 3 1 9 ## NA.71 2906 43 7245 7506 9523 3 3 22 ## NA.72 5786 54 5303 16324 7315 2 4 13 ## NA.73 3879 56 4007 16303 3460 2 5 8 ## NA.74 6863 41 16956 25461 24533 2 39 59 ## NA.75 7144 44 4964 12447 12836 2 21 36 ## NA.76 6241 20 3449 29305 68980 2 47 44 ## NA.77 8680 25 4558 23771 48317 2 29 50 ## NA.78 9572 23 2449 14800 13380 2 43 39 ## NA.79 5731 37 1246 17239 19024 2 64 28 ## NA.80 7566 28 14035 62486 67963 1 56 64 ## NA.81 4710 25 8922 35224 21851 2 68 43 ## NA.82 6402 13 13817 19940 33497 2 67 63 ## NA.83 9044 62 4040 14978 33029 2 82 42 ## NA.84 6516 47 4276 16616 12789 2 30 15 ## Clergy Crm_prn Infntcd Dntn_cl Lottery Desertn Instrct Prsttts ## NA 11 71 60 69 41 55 46 13 ## NA.1 82 4 82 36 38 82 24 327 ## NA.2 68 46 42 76 66 16 85 34 ## NA.3 5 70 12 37 80 32 29 2 ## NA.4 10 22 23 64 79 35 7 1 ## NA.5 28 76 47 67 70 19 62 1 ## NA.6 50 53 85 49 31 62 9 83 ## NA.7 39 74 28 63 75 22 77 3 ## NA.8 42 77 54 9 28 86 15 207 ## NA.9 15 80 35 27 50 63 48 1 ## NA.10 3 51 5 23 81 10 44 4 ## NA.11 30 45 74 55 3 23 43 25 ## NA.12 7 57 56 11 13 12 22 194 ## NA.13 6 79 83 66 82 1 51 20 ## NA.14 79 2 7 81 60 61 47 8 ## NA.15 86 3 38 72 35 74 42 27 ## NA.16 83 69 11 86 44 51 83 26 ## NA.17 46 86 16 82 84 2 86 3 ## NA.18 37 49 27 18 33 78 13 206 ## NA.19 30 6 69 15 72 47 80 16 ## NA.20 75 75 24 75 85 4 71 12 ## NA.21 77 64 18 79 77 44 78 3 ## NA.22 24 38 25 6 18 73 2 65 ## NA.23 22 21 13 62 54 46 38 8 ## NA.24 27 39 45 45 47 27 23 179 ## NA.25 16 18 62 14 48 72 18 180 ## NA.26 66 24 78 25 36 77 81 42 ## NA.27 81 15 39 59 20 40 40 5 ## NA.28 23 62 59 13 25 15 33 8 ## NA.29 12 43 13 32 74 30 44 1 ## NA.30 69 27 80 48 4 13 41 39 ## NA.31 67 47 51 28 19 43 32 9 ## NA.32 19 12 31 22 37 50 66 77 ## NA.33 84 82 19 83 69 29 79 14 ## NA.34 58 48 3 41 15 49 63 59 ## NA.35 53 52 27 73 23 26 57 12 ## NA.36 32 84 66 43 39 71 3 32 ## NA.37 63 1 43 56 73 28 58 3 ## NA.38 57 65 37 70 46 54 61 54 ## NA.39 34 78 77 34 42 6 56 14 ## NA.40 8 73 17 65 62 3 72 10 ## NA.41 73 56 52 29 12 45 67 63 ## NA.42 54 44 22 16 17 60 37 256 ## NA.43 20 54 15 68 78 24 68 1 ## NA.44 49 26 32 46 52 34 50 5 ## NA.45 2 72 45 42 86 5 60 0 ## NA.46 43 19 36 20 24 76 70 35 ## NA.47 9 33 70 3 59 21 36 98 ## NA.48 47 8 58 39 22 81 10 262 ## NA.49 18 63 55 4 56 65 4 138 ## NA.50 40 59 40 8 61 58 75 46 ## NA.51 26 5 71 1 21 70 8 154 ## NA.52 33 17 65 12 58 59 1 131 ## NA.53 31 9 29 7 32 69 82 38 ## NA.54 13 35 9 2 16 68 16 165 ## NA.55 80 83 20 80 63 37 74 39 ## NA.56 74 14 81 38 7 64 30 308 ## NA.57 60 31 86 50 43 57 20 337 ## NA.58 21 29 50 31 57 25 33 117 ## NA.59 44 36 79 10 27 48 26 163 ## NA.60 52 42 63 61 53 8 76 62 ## NA.61 38 34 72 60 34 7 28 12 ## NA.62 17 85 75 71 76 20 21 5 ## NA.63 4 67 84 77 11 18 52 5 ## NA.64 64 23 48 51 5 53 12 101 ## NA.65 65 40 53 17 10 56 5 26 ## NA.66 35 37 33 21 2 14 31 104 ## NA.67 25 25 68 57 65 83 14 99 ## NA.68 59 11 10 58 45 31 49 40 ## NA.69 41 41 57 19 49 75 35 79 ## NA.70 85 60 67 53 1 33 6 4744 ## NA.71 62 28 61 74 9 36 35 546 ## NA.72 56 16 73 26 29 67 37 453 ## NA.73 45 10 30 24 6 42 17 874 ## NA.74 72 30 4 85 71 84 39 6 ## NA.75 48 7 64 33 30 80 34 302 ## NA.76 14 13 9 47 67 17 73 3 ## NA.77 29 66 41 52 64 39 64 4 ## NA.78 61 55 49 40 26 52 69 6 ## NA.79 78 61 76 54 8 41 45 2 ## NA.80 70 50 44 30 68 79 59 4 ## NA.81 71 20 1 44 40 38 65 18 ## NA.82 76 68 6 78 55 11 84 7 ## NA.83 51 58 34 5 14 85 11 43 ## NA.84 55 32 22 35 51 66 27 272 ## Distanc Area Pop1831 ## NA 218.372 5762 346.03 ## NA.1 65.945 7369 513.00 ## NA.2 161.927 7340 298.26 ## NA.3 351.399 6925 155.90 ## NA.4 320.280 5549 129.10 ## NA.5 279.413 5529 340.73 ## NA.6 105.694 5229 289.62 ## NA.7 385.313 4890 253.12 ## NA.8 83.244 6004 246.36 ## NA.9 370.949 6139 270.13 ## NA.10 296.089 8735 359.06 ## NA.11 362.568 5087 359.47 ## NA.12 117.487 5548 494.70 ## NA.13 245.849 5726 258.59 ## NA.14 224.339 5956 362.53 ## NA.15 238.538 6864 445.25 ## NA.16 116.257 7235 256.06 ## NA.17 227.899 5857 294.83 ## NA.18 136.109 8763 375.88 ## NA.19 225.161 6878 598.87 ## NA.20 180.846 5565 265.38 ## NA.21 253.776 9060 482.75 ## NA.22 202.065 5234 265.54 ## NA.23 295.543 6530 299.56 ## NA.24 61.863 6040 424.25 ## NA.25 54.558 5880 278.82 ## NA.26 276.210 6733 524.40 ## NA.27 323.004 5853 357.38 ## NA.28 361.668 6257 427.86 ## NA.29 343.569 6309 312.16 ## NA.30 291.624 10000 554.23 ## NA.31 344.030 6101 346.30 ## NA.32 179.379 6775 547.05 ## NA.33 139.587 6791 245.29 ## NA.34 126.468 6127 297.02 ## NA.35 268.661 7431 550.26 ## NA.36 197.155 4999 312.50 ## NA.37 344.676 9243 281.50 ## NA.38 90.735 6343 235.75 ## NA.39 215.598 4781 391.22 ## NA.40 248.877 4977 292.08 ## NA.41 199.167 6815 470.09 ## NA.42 61.106 6775 305.28 ## NA.43 275.725 5217 283.83 ## NA.44 302.345 5361 346.89 ## NA.45 283.810 5167 140.35 ## NA.46 157.437 7166 467.87 ## NA.47 157.187 5938 591.28 ## NA.48 77.364 6211 337.08 ## NA.49 129.765 8162 249.83 ## NA.50 139.999 5175 352.59 ## NA.51 159.648 5241 415.57 ## NA.52 126.378 6216 314.59 ## NA.53 230.531 6823 433.52 ## NA.54 180.462 6216 417.00 ## NA.55 119.718 6817 282.52 ## NA.56 106.335 5743 989.94 ## NA.57 33.768 5860 397.73 ## NA.58 97.554 6103 441.88 ## NA.59 104.400 6671 655.22 ## NA.60 205.218 7970 573.11 ## NA.61 387.935 7645 428.40 ## NA.62 386.559 4464 233.03 ## NA.63 403.445 4116 157.05 ## NA.64 217.752 4755 540.21 ## NA.65 217.971 3525 424.26 ## NA.66 213.032 3249 434.43 ## NA.67 176.135 5360 338.91 ## NA.68 168.713 8575 523.97 ## NA.69 108.294 6206 457.37 ## NA.70 0.000 762 935.11 ## NA.71 75.658 6278 693.68 ## NA.72 27.647 5915 323.89 ## NA.73 16.888 5334 448.18 ## NA.74 188.474 5999 297.85 ## NA.75 69.520 6170 543.70 ## NA.76 328.146 5758 333.84 ## NA.77 313.090 3718 242.51 ## NA.78 389.512 5973 317.50 ## NA.79 337.215 3567 239.11 ## NA.80 212.459 6720 330.36 ## NA.81 170.523 6990 282.73 ## NA.82 198.874 5520 285.13 ## NA.83 174.477 5874 397.99 ## NA.84 81.797 7427 352.49 Alternatively, you can read a shapefile, geojson (and other spatial file formats) directly into R, with geoda_open(): chicago_libraries &lt;- geoda_open(&quot;https://data.cityofchicago.org/resource/x8fc-8rcq.geojson&quot;) chicago_libraries ``` 15.4.2 Looking at the rgeoda object Currently, rgeoda is structured more like Python; we may change this in a future implementation but it’s what we have so far. Try out the following: guerry$field_names ## [1] &quot;CODE_DE&quot; &quot;COUNT&quot; &quot;AVE_ID_&quot; &quot;dept&quot; &quot;Region&quot; &quot;Dprtmnt&quot; &quot;Crm_prs&quot; ## [8] &quot;Crm_prp&quot; &quot;Litercy&quot; &quot;Donatns&quot; &quot;Infants&quot; &quot;Suicids&quot; &quot;MainCty&quot; &quot;Wealth&quot; ## [15] &quot;Commerc&quot; &quot;Clergy&quot; &quot;Crm_prn&quot; &quot;Infntcd&quot; &quot;Dntn_cl&quot; &quot;Lottery&quot; &quot;Desertn&quot; ## [22] &quot;Instrct&quot; &quot;Prsttts&quot; &quot;Distanc&quot; &quot;Area&quot; &quot;Pop1831&quot; guerry$field_types ## [1] &quot;string&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;string&quot; &quot;string&quot; &quot;numeric&quot; ## [8] &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; ## [15] &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; ## [22] &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; guerry$n_cols ## [1] 26 guerry$n_obs ## [1] 85 guerry$table ## CODE_DE COUNT AVE_ID_ dept Region Dprtmnt Crm_prs ## NA 01 1 49 1 E Ain 28870 ## NA.1 02 1 812 2 N Aisne 26226 ## NA.2 03 1 1418 3 C Allier 26747 ## NA.3 04 1 1603 4 E Basses-Alpes 12935 ## NA.4 05 1 1802 5 E Hautes-Alpes 17488 ## NA.5 07 1 2249 7 S Ardeche 9474 ## NA.6 08 1 35395 8 N Ardennes 35203 ## NA.7 09 1 2526 9 S Ariege 6173 ## NA.8 10 1 34410 10 E Aube 19602 ## NA.9 11 1 2807 11 S Aude 15647 ## NA.10 12 1 3369 12 S Aveyron 8236 ## NA.11 13 1 3515 13 S Bouches-du-Rhone 13409 ## NA.12 14 1 3667 14 N Calvados 17577 ## NA.13 15 1 4268 15 C Cantal 18070 ## NA.14 16 1 4527 16 W Charente 24964 ## NA.15 17 1 5205 17 W Charente-Inferieure 18712 ## NA.16 18 1 5417 18 C Cher 21934 ## NA.17 19 1 5942 19 C Correze 15262 ## NA.18 21 1 6174 21 E Cote-d&#39;Or 32256 ## NA.19 22 1 33634 22 W Cotes-du-Nord 28607 ## NA.20 23 1 6735 23 C Creuse 37014 ## NA.21 24 1 7186 24 W Dordogne 21585 ## NA.22 25 1 7482 25 E Doubs 11560 ## NA.23 26 1 8370 26 E Drome 13396 ## NA.24 27 1 8612 27 N Eure 14795 ## NA.25 28 1 9143 28 C Eure-et-Loir 21368 ## NA.26 29 1 9659 29 W Finistere 29872 ## NA.27 30 1 10264 30 S Gard 13115 ## NA.28 31 1 10962 31 S Haute-Garonne 18642 ## NA.29 32 1 11008 32 S Gers 18642 ## NA.30 33 1 11520 33 W Gironde 24096 ## NA.31 34 1 12162 34 S Herault 12814 ## NA.32 35 1 12532 35 W Ille-et-Vilaine 22138 ## NA.33 36 1 12687 36 C Indre 32404 ## NA.34 37 1 13147 37 C Indre-et-Loire 19131 ## NA.35 38 1 13341 38 E Isere 18785 ## NA.36 39 1 13977 39 E Jura 26221 ## NA.37 40 1 14431 40 W Landes 17687 ## NA.38 41 1 14589 41 C Loir-et-Cher 21292 ## NA.39 42 1 15070 42 C Loire 27491 ## NA.40 43 1 15339 43 C Haute-Loire 16170 ## NA.41 44 1 15550 44 W Loire-Inferieure 19314 ## NA.42 45 1 15881 45 C Loiret 17722 ## NA.43 46 1 16029 46 S Lot 5883 ## NA.44 47 1 16326 47 W Lot-et-Garonne 22969 ## NA.45 48 1 16732 48 S Lozere 7710 ## NA.46 49 1 16834 49 W Maine-et-Loire 29692 ## NA.47 50 1 17502 50 N Manche 31078 ## NA.48 51 1 36143 51 N Marne 15602 ## NA.49 52 1 34913 52 E Haute-Marne 26231 ## NA.50 53 1 17708 53 W Mayenne 28331 ## NA.51 54 1 18215 54 E Meurthe 26674 ## NA.52 55 1 18431 55 N Meuse 24507 ## NA.53 56 1 19153 56 W Morbihan 23316 ## NA.54 57 1 19575 57 N Moselle 12153 ## NA.55 58 1 20037 58 C Nievre 25087 ## NA.56 59 1 36521 59 N Nord 26740 ## NA.57 60 1 20823 60 N Oise 28180 ## NA.58 61 1 21456 61 N Orne 28329 ## NA.59 62 1 21990 62 N Pas-de-Calais 23101 ## NA.60 63 1 22829 63 C Puy-de-Dome 17256 ## NA.61 64 1 23572 64 W Basses-Pyrenees 16722 ## NA.62 65 1 24112 65 S Hautes-Pyrenees 12223 ## NA.63 66 1 24280 66 S Pyrenees-Orientales 6728 ## NA.64 67 1 24814 67 E Bas-Rhin 12309 ## NA.65 68 1 24947 68 E Haut-Rhin 7343 ## NA.66 69 1 25381 69 E Rhone 18793 ## NA.67 70 1 26063 70 E Haute-Saone 22339 ## NA.68 71 1 26357 71 E Saone-et-Loire 28391 ## NA.69 72 1 26842 72 C Sarthe 33913 ## NA.70 75 4 31560 75 N Seine 13945 ## NA.71 76 1 28118 76 N Seine-Inferieure 18355 ## NA.72 77 1 28566 77 N Seine-et-Marne 22201 ## NA.73 78 3 31598 78 N Seine-et-Oise 12477 ## NA.74 79 1 29204 79 W Deux-Sevres 18400 ## NA.75 80 1 29360 80 N Somme 33592 ## NA.76 81 1 30128 81 S Tarn 13019 ## NA.77 82 1 30546 82 S Tarn-et-Garonne 14790 ## NA.78 83 1 30753 83 S Var 13145 ## NA.79 84 1 30777 84 S Vaucluse 13576 ## NA.80 85 1 31097 85 W Vendee 20827 ## NA.81 86 1 31387 86 W Vienne 15010 ## NA.82 87 1 31564 87 C Haute-Vienne 16256 ## NA.83 88 1 31810 88 E Vosges 18835 ## NA.84 89 1 32129 89 C Yonne 18006 ## Crm_prp Litercy Donatns Infants Suicids MainCty Wealth Commerc ## NA 15890 37 5098 33120 35039 2 73 58 ## NA.1 5521 51 8901 14572 12831 2 22 10 ## NA.2 7925 13 10973 17044 114121 2 61 66 ## NA.3 7289 46 2733 23018 14238 1 76 49 ## NA.4 8174 69 6962 23076 16171 1 83 65 ## NA.5 10263 27 3188 42117 52547 1 84 1 ## NA.6 8847 67 6400 16106 26198 2 33 4 ## NA.7 9597 18 3542 22916 123625 1 72 60 ## NA.8 4086 59 3608 18642 10989 2 14 3 ## NA.9 10431 34 2582 20225 66498 2 17 35 ## NA.10 6731 31 3211 21981 116671 2 50 70 ## NA.11 5291 38 2314 9325 8107 3 2 26 ## NA.12 4500 52 27830 8983 31807 2 10 48 ## NA.13 11645 31 4093 15335 87338 2 59 7 ## NA.14 13018 36 13602 19454 25720 2 86 47 ## NA.15 5357 39 13254 23999 16798 2 18 5 ## NA.16 10503 13 9561 23574 19497 2 63 56 ## NA.17 12949 12 14993 19330 47480 2 74 80 ## NA.18 9159 60 2540 15599 16128 2 16 12 ## NA.19 7050 16 10387 36098 75056 2 70 86 ## NA.20 20235 23 10997 14363 77823 1 78 82 ## NA.21 10237 18 4687 21375 36024 2 60 72 ## NA.22 5914 73 3436 12512 40690 2 31 57 ## NA.23 7759 42 2829 16348 23816 2 66 41 ## NA.24 4774 51 11712 16039 13493 2 20 17 ## NA.25 4016 54 4553 14475 15015 2 11 21 ## NA.26 6842 15 23945 28392 25143 2 36 84 ## NA.27 7990 40 3048 28726 18292 2 26 31 ## NA.28 7204 31 2286 15378 56140 3 23 40 ## NA.29 10486 38 2848 15250 61510 2 40 30 ## NA.30 7423 40 5076 10676 19220 3 8 20 ## NA.31 10954 45 1680 21346 30869 2 12 34 ## NA.32 6524 25 7686 40736 45180 2 55 77 ## NA.33 7624 17 11315 20046 25014 2 54 55 ## NA.34 6909 27 7254 16601 15272 2 27 25 ## NA.35 8326 29 4077 12236 36275 2 65 46 ## NA.36 8059 73 3012 20384 34476 2 62 54 ## NA.37 6170 28 12059 15302 35375 1 81 68 ## NA.38 6017 27 5626 13364 14417 2 19 23 ## NA.39 12665 29 3446 29605 71364 2 24 79 ## NA.40 18043 21 2746 31017 163241 2 75 85 ## NA.41 9392 24 8310 14097 27289 3 80 76 ## NA.42 5042 42 4753 9986 11813 2 9 24 ## NA.43 9049 24 5194 20383 48783 2 42 67 ## NA.44 8943 31 4432 17681 38501 2 7 53 ## NA.45 5990 27 2040 25157 11092 1 77 69 ## NA.46 8520 23 4410 18708 33358 2 34 52 ## NA.47 7424 43 5179 14281 55564 2 32 73 ## NA.48 4950 63 3963 11267 8334 2 13 6 ## NA.49 9539 72 4013 17507 19586 1 25 7 ## NA.50 9198 19 2107 18544 28331 2 38 75 ## NA.51 6831 68 3912 12355 15652 2 57 11 ## NA.52 9190 74 4196 17333 13463 2 52 2 ## NA.53 7940 14 14739 31754 34196 2 48 81 ## NA.54 4529 57 9515 13877 25572 3 53 19 ## NA.55 8236 20 10452 19747 29381 2 44 33 ## NA.56 6175 45 6092 8926 13851 3 28 38 ## NA.57 6659 54 5501 18021 5994 2 15 14 ## NA.58 8248 45 9242 20852 34069 2 35 62 ## NA.59 4040 49 5740 10575 15400 2 45 39 ## NA.60 12141 19 5963 22948 78148 2 51 78 ## NA.61 8533 47 3299 12393 65995 2 79 71 ## NA.62 9797 53 6001 12125 148039 2 85 51 ## NA.63 7632 31 11644 15167 37843 2 71 37 ## NA.64 4920 62 14472 14356 18623 3 46 16 ## NA.65 4915 71 6001 14783 21233 2 58 29 ## NA.66 4504 45 1983 3910 17003 3 6 18 ## NA.67 7770 59 11701 11850 39714 1 69 27 ## NA.68 10708 32 3710 20442 22184 2 49 61 ## NA.69 8294 30 3357 10779 29280 2 41 45 ## NA.70 1368 71 4204 2660 3632 3 1 9 ## NA.71 2906 43 7245 7506 9523 3 3 22 ## NA.72 5786 54 5303 16324 7315 2 4 13 ## NA.73 3879 56 4007 16303 3460 2 5 8 ## NA.74 6863 41 16956 25461 24533 2 39 59 ## NA.75 7144 44 4964 12447 12836 2 21 36 ## NA.76 6241 20 3449 29305 68980 2 47 44 ## NA.77 8680 25 4558 23771 48317 2 29 50 ## NA.78 9572 23 2449 14800 13380 2 43 39 ## NA.79 5731 37 1246 17239 19024 2 64 28 ## NA.80 7566 28 14035 62486 67963 1 56 64 ## NA.81 4710 25 8922 35224 21851 2 68 43 ## NA.82 6402 13 13817 19940 33497 2 67 63 ## NA.83 9044 62 4040 14978 33029 2 82 42 ## NA.84 6516 47 4276 16616 12789 2 30 15 ## Clergy Crm_prn Infntcd Dntn_cl Lottery Desertn Instrct Prsttts ## NA 11 71 60 69 41 55 46 13 ## NA.1 82 4 82 36 38 82 24 327 ## NA.2 68 46 42 76 66 16 85 34 ## NA.3 5 70 12 37 80 32 29 2 ## NA.4 10 22 23 64 79 35 7 1 ## NA.5 28 76 47 67 70 19 62 1 ## NA.6 50 53 85 49 31 62 9 83 ## NA.7 39 74 28 63 75 22 77 3 ## NA.8 42 77 54 9 28 86 15 207 ## NA.9 15 80 35 27 50 63 48 1 ## NA.10 3 51 5 23 81 10 44 4 ## NA.11 30 45 74 55 3 23 43 25 ## NA.12 7 57 56 11 13 12 22 194 ## NA.13 6 79 83 66 82 1 51 20 ## NA.14 79 2 7 81 60 61 47 8 ## NA.15 86 3 38 72 35 74 42 27 ## NA.16 83 69 11 86 44 51 83 26 ## NA.17 46 86 16 82 84 2 86 3 ## NA.18 37 49 27 18 33 78 13 206 ## NA.19 30 6 69 15 72 47 80 16 ## NA.20 75 75 24 75 85 4 71 12 ## NA.21 77 64 18 79 77 44 78 3 ## NA.22 24 38 25 6 18 73 2 65 ## NA.23 22 21 13 62 54 46 38 8 ## NA.24 27 39 45 45 47 27 23 179 ## NA.25 16 18 62 14 48 72 18 180 ## NA.26 66 24 78 25 36 77 81 42 ## NA.27 81 15 39 59 20 40 40 5 ## NA.28 23 62 59 13 25 15 33 8 ## NA.29 12 43 13 32 74 30 44 1 ## NA.30 69 27 80 48 4 13 41 39 ## NA.31 67 47 51 28 19 43 32 9 ## NA.32 19 12 31 22 37 50 66 77 ## NA.33 84 82 19 83 69 29 79 14 ## NA.34 58 48 3 41 15 49 63 59 ## NA.35 53 52 27 73 23 26 57 12 ## NA.36 32 84 66 43 39 71 3 32 ## NA.37 63 1 43 56 73 28 58 3 ## NA.38 57 65 37 70 46 54 61 54 ## NA.39 34 78 77 34 42 6 56 14 ## NA.40 8 73 17 65 62 3 72 10 ## NA.41 73 56 52 29 12 45 67 63 ## NA.42 54 44 22 16 17 60 37 256 ## NA.43 20 54 15 68 78 24 68 1 ## NA.44 49 26 32 46 52 34 50 5 ## NA.45 2 72 45 42 86 5 60 0 ## NA.46 43 19 36 20 24 76 70 35 ## NA.47 9 33 70 3 59 21 36 98 ## NA.48 47 8 58 39 22 81 10 262 ## NA.49 18 63 55 4 56 65 4 138 ## NA.50 40 59 40 8 61 58 75 46 ## NA.51 26 5 71 1 21 70 8 154 ## NA.52 33 17 65 12 58 59 1 131 ## NA.53 31 9 29 7 32 69 82 38 ## NA.54 13 35 9 2 16 68 16 165 ## NA.55 80 83 20 80 63 37 74 39 ## NA.56 74 14 81 38 7 64 30 308 ## NA.57 60 31 86 50 43 57 20 337 ## NA.58 21 29 50 31 57 25 33 117 ## NA.59 44 36 79 10 27 48 26 163 ## NA.60 52 42 63 61 53 8 76 62 ## NA.61 38 34 72 60 34 7 28 12 ## NA.62 17 85 75 71 76 20 21 5 ## NA.63 4 67 84 77 11 18 52 5 ## NA.64 64 23 48 51 5 53 12 101 ## NA.65 65 40 53 17 10 56 5 26 ## NA.66 35 37 33 21 2 14 31 104 ## NA.67 25 25 68 57 65 83 14 99 ## NA.68 59 11 10 58 45 31 49 40 ## NA.69 41 41 57 19 49 75 35 79 ## NA.70 85 60 67 53 1 33 6 4744 ## NA.71 62 28 61 74 9 36 35 546 ## NA.72 56 16 73 26 29 67 37 453 ## NA.73 45 10 30 24 6 42 17 874 ## NA.74 72 30 4 85 71 84 39 6 ## NA.75 48 7 64 33 30 80 34 302 ## NA.76 14 13 9 47 67 17 73 3 ## NA.77 29 66 41 52 64 39 64 4 ## NA.78 61 55 49 40 26 52 69 6 ## NA.79 78 61 76 54 8 41 45 2 ## NA.80 70 50 44 30 68 79 59 4 ## NA.81 71 20 1 44 40 38 65 18 ## NA.82 76 68 6 78 55 11 84 7 ## NA.83 51 58 34 5 14 85 11 43 ## NA.84 55 32 22 35 51 66 27 272 ## Distanc Area Pop1831 ## NA 218.372 5762 346.03 ## NA.1 65.945 7369 513.00 ## NA.2 161.927 7340 298.26 ## NA.3 351.399 6925 155.90 ## NA.4 320.280 5549 129.10 ## NA.5 279.413 5529 340.73 ## NA.6 105.694 5229 289.62 ## NA.7 385.313 4890 253.12 ## NA.8 83.244 6004 246.36 ## NA.9 370.949 6139 270.13 ## NA.10 296.089 8735 359.06 ## NA.11 362.568 5087 359.47 ## NA.12 117.487 5548 494.70 ## NA.13 245.849 5726 258.59 ## NA.14 224.339 5956 362.53 ## NA.15 238.538 6864 445.25 ## NA.16 116.257 7235 256.06 ## NA.17 227.899 5857 294.83 ## NA.18 136.109 8763 375.88 ## NA.19 225.161 6878 598.87 ## NA.20 180.846 5565 265.38 ## NA.21 253.776 9060 482.75 ## NA.22 202.065 5234 265.54 ## NA.23 295.543 6530 299.56 ## NA.24 61.863 6040 424.25 ## NA.25 54.558 5880 278.82 ## NA.26 276.210 6733 524.40 ## NA.27 323.004 5853 357.38 ## NA.28 361.668 6257 427.86 ## NA.29 343.569 6309 312.16 ## NA.30 291.624 10000 554.23 ## NA.31 344.030 6101 346.30 ## NA.32 179.379 6775 547.05 ## NA.33 139.587 6791 245.29 ## NA.34 126.468 6127 297.02 ## NA.35 268.661 7431 550.26 ## NA.36 197.155 4999 312.50 ## NA.37 344.676 9243 281.50 ## NA.38 90.735 6343 235.75 ## NA.39 215.598 4781 391.22 ## NA.40 248.877 4977 292.08 ## NA.41 199.167 6815 470.09 ## NA.42 61.106 6775 305.28 ## NA.43 275.725 5217 283.83 ## NA.44 302.345 5361 346.89 ## NA.45 283.810 5167 140.35 ## NA.46 157.437 7166 467.87 ## NA.47 157.187 5938 591.28 ## NA.48 77.364 6211 337.08 ## NA.49 129.765 8162 249.83 ## NA.50 139.999 5175 352.59 ## NA.51 159.648 5241 415.57 ## NA.52 126.378 6216 314.59 ## NA.53 230.531 6823 433.52 ## NA.54 180.462 6216 417.00 ## NA.55 119.718 6817 282.52 ## NA.56 106.335 5743 989.94 ## NA.57 33.768 5860 397.73 ## NA.58 97.554 6103 441.88 ## NA.59 104.400 6671 655.22 ## NA.60 205.218 7970 573.11 ## NA.61 387.935 7645 428.40 ## NA.62 386.559 4464 233.03 ## NA.63 403.445 4116 157.05 ## NA.64 217.752 4755 540.21 ## NA.65 217.971 3525 424.26 ## NA.66 213.032 3249 434.43 ## NA.67 176.135 5360 338.91 ## NA.68 168.713 8575 523.97 ## NA.69 108.294 6206 457.37 ## NA.70 0.000 762 935.11 ## NA.71 75.658 6278 693.68 ## NA.72 27.647 5915 323.89 ## NA.73 16.888 5334 448.18 ## NA.74 188.474 5999 297.85 ## NA.75 69.520 6170 543.70 ## NA.76 328.146 5758 333.84 ## NA.77 313.090 3718 242.51 ## NA.78 389.512 5973 317.50 ## NA.79 337.215 3567 239.11 ## NA.80 212.459 6720 330.36 ## NA.81 170.523 6990 282.73 ## NA.82 198.874 5520 285.13 ## NA.83 174.477 5874 397.99 ## NA.84 81.797 7427 352.49 Note that this is not really a data frame - rgeoda right now is optimized to help you do spatial weights, autocorrelation and clustering. So let’s do those things! 15.5 Spatial Analysis with rgeoda Let’s create weights from an rgeoda object: queen_weights(guerry) ## Reference class object of class &quot;Weight&quot; ## Field &quot;gda_w&quot;: ## An object of class &quot;_p_GeoDaWeight&quot; ## Slot &quot;ref&quot;: ## &lt;pointer: 0x7feff20596b0&gt; ## ## Field &quot;is_symmetric&quot;: ## [1] TRUE ## Field &quot;sparsity&quot;: ## [1] 0 ## Field &quot;density&quot;: ## [1] 5.813149 ## Field &quot;min_neighbors&quot;: ## [1] 2 ## Field &quot;max_neighbors&quot;: ## [1] 8 ## Field &quot;num_obs&quot;: ## [1] 85 ## Field &quot;mean_neighbors&quot;: ## [1] 4.941176 ## Field &quot;median_neighbors&quot;: ## [1] 5 Much easier than spdep, eh? You can change the order from first to second: queen_weights(guerry, order = 2) ## Reference class object of class &quot;Weight&quot; ## Field &quot;gda_w&quot;: ## An object of class &quot;_p_GeoDaWeight&quot; ## Slot &quot;ref&quot;: ## &lt;pointer: 0x7feff3a34c30&gt; ## ## Field &quot;is_symmetric&quot;: ## [1] TRUE ## Field &quot;sparsity&quot;: ## [1] 0 ## Field &quot;density&quot;: ## [1] 10.46367 ## Field &quot;min_neighbors&quot;: ## [1] 2 ## Field &quot;max_neighbors&quot;: ## [1] 14 ## Field &quot;num_obs&quot;: ## [1] 85 ## Field &quot;mean_neighbors&quot;: ## [1] 8.894118 ## Field &quot;median_neighbors&quot;: ## [1] 9 We can save the original weights: queen_w &lt;- queen_weights(guerry) Then take a look at the class: class(queen_w) ## [1] &quot;Weight&quot; ## attr(,&quot;package&quot;) ## [1] &quot;rgeoda&quot; Question Try out the following functions: queen_w$is_symmetric min_nbrs max_nbrs GetNeighbors(0) Find more listed here: Attributes of Weight object Many more types of weights can be found here. 15.5.1 Detour: saving your weights To save contiguity-based weights, use the SaveToFile() function in rgeoda. The four arguments you need for SaveToFile() are the: path/name of the file you’re going to create (ends in .gal for contiguity-based weights, .gwt for distance-based weights) layer name (aka file name without suffix, ie XXX.shp ) id column name, a unique value for each observation id column itself id_names &lt;- guerry$GetIntegerCol(&quot;CODE_DE&quot;) queen_w$SaveToFile(&quot;guerry_queen.gal&quot;, &quot;Guerry&quot;, &quot;CODE_DE&quot;, id_names) 15.6 Calculating the Local Moran statistic You can then calculate the Local Moran statistic once you have your weights: crm_prp &lt;- guerry_sf$Crm_prp lisa &lt;- local_moran(queen_w, crm_prp) And make a map! lisa_colors &lt;- lisa$GetColors() lisa_labels &lt;- lisa$GetLabels() lisa_clusters &lt;- lisa$GetClusterIndicators() plot(st_geometry(guerry_sf), col=sapply(lisa_clusters, function(x){return(lisa_colors[[x+1]])}), border = &quot;#333333&quot;, lwd=0.2) title(main = &quot;Local Moran Map of Crm_prp&quot;) legend(&#39;bottomleft&#39;, legend = lisa_labels, fill = lisa_colors, border = &quot;#eeeeee&quot;) "]
]
